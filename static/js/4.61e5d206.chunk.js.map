{"version":3,"sources":["util/currency.ts","components/GeospatialChart/hooks/useGeospatialChart.tsx","components/GeospatialChart/ChartLegend.tsx","components/GeospatialChart/GeospatialChart.tsx","components/GeospatialChart/hooks/usePanAndZoom.tsx","components/GeospatialChart/YearSelector.tsx","pages/MinimumWage/constants.ts","services/models/minimumWage.ts","hooks/useResizeChart.tsx","layout/PageLayout.tsx","hooks/useFallback.tsx","hooks/useIncrementYear.tsx","services/apis.ts","services/lib/maps.ts","util/inflation.ts","services/lib/minimumWage.ts","components/LineChart/AxisBottom.tsx","components/LineChart/AxisLeft.tsx","components/AnimatedGroup/AnimatedGroup.tsx","components/LineChart/LineChart.tsx","components/LineChart/LineChartAxes.tsx","components/ScatterPlot/AxisBottom.tsx","components/ScatterPlot/ScatterPlot.tsx","util/convertStateToAbbreviation.ts","components/ScatterPlot/ScatterPlotAxes.tsx","pages/MinimumWage/FinalVisPage.tsx","services/hooks/useQuery.tsx"],"names":["currencyFormatter","Intl","NumberFormat","style","currency","useGeospatialChart","rows","timeField","stateField","colorRepresentation","chosenTimeFieldValue","filteredRows","filter","row","Number","colorSaturationScale","scaleSequential","domain","extent","interpolator","interpolateBlues","states","reduce","acc","current","push","state","toString","value","color","colorExtent","curr","max","min","findFieldByStateOrDefault","field","defaultValue","find","el","Text","Typography","ChartLegend","chosenTimeField","colors","accumulator","length","width","cols","map","span","height","backgroundColor","justify","format","GeospatialChart","data","chosenState","showLegend","onMouseOver","onClick","renderToolTip","useState","ref","setRef","useEffect","ReactTooltip","rebuild","svgZoom","zoom","on","event","select","attr","transform","scaleExtent","translateExtent","call","usePanAndZoom","usData","projection","geoAlbersUsa","translate","scale","path","geoPath","features","feature","objects","id","properties","name","className","d","stroke","strokeWidth","undefined","fill","getContent","fieldValue","YearSelector","defaultYear","minYear","maxYear","incrementYearDisabled","onChange","toggleIncrementYear","direction","justifyContent","strong","size","val","checked","Constants","MinimumWageCols","year","stateMinWage","stateMinWageTodayDollars","federalMinWage","federalMinWageTodayDollars","effectiveMinWage","effectiveMinWageTodayDollars","cpiAverage","depLaborUncleanData","depLaborCleanedLowValue","depLaborCleanedLowValueTodayDollars","depLaborCleanedHighValue","depLaborCleanedHighValueTodayDollars","footnote","studio","oneBedroom","twoBedroom","threeBedroom","fourBedroom","studioPercentOfRent","oneBedroomPercentOfRent","twoBedroomPercentOfRent","threeBedroomPercentOfRent","fourBedroomPercentOfRent","population","initialDimensions","marginTop","marginRight","marginBottom","marginLeft","useResizeChart","useRef","setWidth","setHeight","resizeObserver","ResizeObserver","entries","Array","isArray","entry","contentRect","element","observe","unobserve","newChartDimensions","dimensions","parsedDimensions","boundedHeight","Math","boundedWidth","combineChartDimensions","PageLayout","pageTitle","menuItems","description","generateChart","showDescriptionTitle","gutter","flex","textAlign","fontSize","useIncrementYear","shouldIncrement","currentSelectedYear","setYear","interval","setInterval","clearInterval","BASE_URL","API","MinimumWageCSV","RentCSV","WorldMap","USMap","fetchUSMap","a","fetch","json","usMap","accountForInflation","fromCPI","dollars","parseMinimumCsv","Year","State","Footnote","rowType","parseRentCsv","Population","merge","rents","minWages","minWage","rent","fetchMinimumWageCSV","csv","AxisBottom","xScale","tickOffset","ticks","tick","y2","dy","textAnchor","y","AxisLeft","yScale","x2","x","AnimatedGroup","forwardRef","children","rest","opacity","useSpring","from","delay","g","filterData","grouping","brushExtent","lines","rowIndex","sort","rowOne","rowTwo","localeCompare","forEach","index","arr","LineChart","margin","xLabel","yLabel","focusable","cords","setBrushExtent","brushRef","xValue","useCallback","yValue","colorValue","brushedSectionHeight","useMemo","yRange","xRange","focusXRange","paddedHeight","top","bottom","paddedWidth","left","right","scaleLinear","range","nice","focusXScale","focusYScale","colorScale","uniqueOrdinalValues","Set","numUniqueOrdinalValues","_","interpolateTurbo","scaleOrdinal","marginsForAxes","yAxisLabelOffset","drawLines","line","curve","curveBasis","drawFocus","brush","brushX","selection","invert","focusLines","toDrawLine","cordX","cordY","cx","cy","r","place","effect","Option","Select","LineChartAxes","selectedX","selectedY","onSelectX","onSelectY","labels","numericOptions","Object","col","maxWidth","key","isDollarValue","firstTick","hasThirty","x1","y1","offset","stopColor","xlinkHref","spreadMethod","markerWidth","markerHeight","refX","refY","orient","points","markerEnd","ScatterPlot","radius","isXAxisDollarValue","circleText","colorRange","yAxisLabel","cursor","StateAbbreviation","alabama","alaska","arizona","arkansas","california","colorado","connecticut","delaware","florida","georgia","hawaii","idaho","illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland","massachusetts","michigan","minnesota","mississippi","missouri","montana","nebraska","nevada","ohio","oklahoma","oregon","pennsylvania","tennessee","texas","utah","vermont","virginia","washington","wisconsin","wyoming","guam","micronesia","palau","FinalVisPage","options","useQuery","isError","isLoading","useUSMapQuery","isUSMapError","isLoadingUSMap","minScatterPlotYear","shouldDisableAutoIncrement","setShouldDisableAutoIncrementYear","shouldDisableScatterPlotAutoIncrement","setShouldDisableScatterPlotAutoIncrement","selectedYear","setSelectedYear","selectedScatterPlotYear","setSelectedScatterPlotYear","selectedState","setSelectedState","selectedRent","setSelectedRent","lineGraphX","setLineGraphX","lineGraphY","setLineGraphY","filteredData","fallback","Loading","useFallback","Boolean","xAxisLabel","generateScatterPlotXAxisText","to","pathname","target","display","paddingLeft","type","disabled","wage","toLowerCase","lowercase","convertStateToAbbreviation"],"mappings":"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","file":"static/js/4.61e5d206.chunk.js","sourcesContent":["export const currencyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n","import { DSVParsedArray, extent, interpolateBlues, scaleSequential } from 'd3';\n\nimport { CSVRow } from '../../../services/models/shared';\n\nexport const useGeospatialChart = (\n  rows: DSVParsedArray<CSVRow>,\n  timeField: string,\n  stateField: string,\n  colorRepresentation: string,\n  chosenTimeFieldValue: number\n) => {\n  // filter the rows by some time value (preferably year)\n  const filteredRows = rows.filter(\n    (row) => Number(row[timeField]) === chosenTimeFieldValue\n  );\n\n  // color saturation scale\n  const colorSaturationScale = scaleSequential()\n    .domain(\n      extent(filteredRows, (row) => {\n        return Number(row[colorRepresentation]);\n      }) as [number, number]\n    )\n    .interpolator(interpolateBlues);\n\n  // create an array of states with some representation of some value\n  const states = filteredRows.reduce((acc, current) => {\n    acc.push({\n      state: current[stateField]?.toString() ?? '',\n      value: Number(current[colorRepresentation]),\n      color: colorSaturationScale(Number(current[colorRepresentation])),\n    });\n    return acc;\n  }, [] as { state: string; value: number; color: string }[]);\n\n  // create max and min for color values\n  const colorExtent = states.reduce(\n    (acc: null | { max: number; min: number }, curr) => {\n      if (!acc) {\n        return { max: curr.value, min: curr.value };\n      }\n\n      if (curr.value > acc.max) {\n        return { max: curr.value, min: acc.min };\n      }\n\n      if (curr.value < acc.min) {\n        return { max: acc.min, min: curr.value };\n      }\n\n      return acc;\n    },\n    null\n  );\n\n  const findFieldByStateOrDefault = <T extends string | number>(\n    state: string,\n    field: 'value' | 'color',\n    defaultValue: T\n  ): T => {\n    return (\n      (states.find((el) => el.state === state)?.[field] as T) ?? defaultValue\n    );\n  };\n\n  return {\n    colorSaturationScale,\n    filteredRows,\n    states,\n    colorExtent,\n    findFieldByStateOrDefault,\n  };\n};\n","import { Col, Row, Typography } from 'antd';\n\nimport { CSVRow } from '../../services/models/shared';\nimport { DSVParsedArray } from 'd3';\nimport { KeysMatching } from '../../types/shared';\nimport { currencyFormatter } from '../../util/currency';\nimport { useGeospatialChart } from './hooks/useGeospatialChart';\n\nconst { Text } = Typography;\n\nexport interface ChartLegendProps<T extends CSVRow> {\n  timeField: KeysMatching<T, number | undefined>;\n  stateField: KeysMatching<T, string | undefined>;\n  colorRepresentation: KeysMatching<T, number | undefined>;\n  chosenTimeField: number;\n  rows: DSVParsedArray<CSVRow>;\n}\n\nexport const ChartLegend = <T extends CSVRow>({\n  timeField,\n  stateField,\n  colorRepresentation,\n  chosenTimeField,\n  rows,\n}: ChartLegendProps<T>) => {\n  const { colorExtent, colorSaturationScale } = useGeospatialChart(\n    rows,\n    timeField as string,\n    stateField as string,\n    colorRepresentation as string,\n    chosenTimeField\n  );\n\n  const colors: string[] = [];\n  const max = colorExtent?.max || 0;\n  let min = colorExtent?.min || 0;\n\n  const accumulator = (max - min) / 8;\n\n  while (colors.length < 8) {\n    colors.push(colorSaturationScale(min));\n    min += accumulator;\n  }\n\n  // the 200 is some arbitrary number\n  const width = 200 / colors.length;\n  const cols = colors.map((color) => (\n    <Col\n      span={3}\n      style={{ height: '25px', width, backgroundColor: color }}\n      key={color}\n    />\n  ));\n\n  return (\n    <>\n      <Row justify=\"end\">{cols}</Row>\n      <Row justify=\"space-between\">\n        <Text>{currencyFormatter.format(colorExtent?.min ?? 0)}</Text>\n        <Text>{currencyFormatter.format(max)}</Text>\n      </Row>\n    </>\n  );\n};\n","import './GeospatialChart.css';\n\nimport { DSVParsedArray, geoAlbersUsa, geoPath } from 'd3';\nimport { MouseEvent, useEffect, useState, ReactElement } from 'react';\n\nimport { ChartLegend } from './ChartLegend';\nimport { CSVRow } from '../../services/models/shared';\nimport { KeysMatching } from '../../types/shared';\nimport ReactTooltip from 'react-tooltip';\nimport { USMap } from '../../services/models/maps';\nimport { feature } from 'topojson-client';\nimport { useGeospatialChart } from './hooks/useGeospatialChart';\nimport { usePanAndZoom } from './hooks/usePanAndZoom';\nimport { Col, Row } from 'antd';\n\nexport interface GeospatialChartProps<T extends CSVRow> {\n  width: number;\n  height: number;\n  rows: DSVParsedArray<CSVRow>;\n  timeField: KeysMatching<T, number | undefined>;\n  stateField: KeysMatching<T, string | undefined>;\n  colorRepresentation: KeysMatching<T, number | undefined>;\n  chosenTimeField: number;\n  data: USMap;\n  chosenState?: string;\n  showLegend?: boolean;\n  onMouseOver?: (event: MouseEvent<SVGPathElement>, state: string) => void;\n  onClick?: (event: MouseEvent<SVGPathElement>, state: string) => void;\n  renderToolTip?: (state: string, fieldValue: number) => ReactElement;\n}\n\nexport const GeospatialChart = <T extends CSVRow>({\n  width,\n  height,\n  rows,\n  timeField,\n  stateField,\n  data,\n  colorRepresentation,\n  chosenTimeField,\n  chosenState,\n  showLegend = false,\n  onMouseOver,\n  onClick,\n  renderToolTip,\n}: GeospatialChartProps<T>) => {\n  const [ref, setRef] = useState<SVGSVGElement | null>(null);\n\n  useEffect(() => {\n    ReactTooltip.rebuild();\n  }, []);\n\n  usePanAndZoom(ref, height, width);\n  const { findFieldByStateOrDefault } = useGeospatialChart(\n    rows,\n    timeField as string,\n    stateField as string,\n    colorRepresentation as string,\n    chosenTimeField\n  );\n\n  const generateScale = () => {\n    if (width / 1.3 > 800) {\n      return 800;\n    }\n\n    return width / 1.3;\n  };\n\n  const usData = data as USMap;\n  const projection = geoAlbersUsa()\n    .translate([width / 2, height / 2])\n    .scale(generateScale());\n  const path = geoPath().projection(projection);\n  const { features } = feature(usData, usData.objects.states);\n\n  return (\n    <>\n      <svg height={height} width={width} ref={setRef}>\n        <g id=\"states\">\n          {features.map((value) => (\n            <path\n              data-event=\"mouseover\"\n              data-event-off=\"mouseout\"\n              data-tip={value.properties.name}\n              data-for=\"states-tooltip\"\n              className={\n                chosenState === value.properties.name\n                  ? 'state clicked'\n                  : 'state'\n              }\n              d={path(value) as string}\n              stroke=\"black\"\n              strokeWidth={0.5}\n              key={`${value.properties.name}`}\n              onClick={(event) => {\n                if (onClick) {\n                  onClick(event, value.properties.name);\n                }\n              }}\n              onMouseOver={\n                onMouseOver\n                  ? (event) => onMouseOver(event, value.properties.name)\n                  : undefined\n              }\n              fill={findFieldByStateOrDefault<string>(\n                value.properties.name,\n                'color',\n                'green'\n              )}\n            />\n          ))}\n        </g>\n      </svg>\n      {renderToolTip && (\n        <ReactTooltip\n          id=\"states-tooltip\"\n          getContent={(state) => {\n            const fieldValue = findFieldByStateOrDefault<number>(\n              state,\n              'value',\n              0\n            );\n            return renderToolTip(state, fieldValue);\n          }}\n        />\n      )}\n      {showLegend && (\n        <Row style={{ width }} justify=\"center\">\n          <Col>\n            <ChartLegend<T>\n              timeField={timeField}\n              stateField={stateField}\n              colorRepresentation={colorRepresentation}\n              chosenTimeField={chosenTimeField}\n              rows={rows}\n            />\n          </Col>\n        </Row>\n      )}\n    </>\n  );\n};\n","import { select, zoom } from 'd3';\n\nimport { useEffect } from 'react';\n\nexport const usePanAndZoom = (\n  ref: SVGSVGElement | null,\n  height: number,\n  width: number\n) => {\n  useEffect(() => {\n    if (ref) {\n      const svgZoom = zoom<SVGSVGElement, unknown>();\n\n      svgZoom.on('zoom', (event) =>\n        select('#states').attr('transform', event.transform)\n      );\n      svgZoom.scaleExtent([1, 8]);\n      svgZoom.translateExtent([\n        [0, height - 400],\n        [width, height],\n      ]);\n\n      select(ref).call(svgZoom);\n    }\n  }, [ref, height, width]);\n};\n","import { Slider, Space, Switch, Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport interface YearSelectorProps {\n  defaultYear: number;\n  minYear: number;\n  maxYear: number;\n  incrementYearDisabled: boolean;\n  onChange: (year: number) => void;\n  toggleIncrementYear: (disable: boolean) => void;\n}\n\nexport const YearSelector: React.FC<YearSelectorProps> = ({\n  defaultYear,\n  minYear,\n  maxYear,\n  incrementYearDisabled,\n  onChange,\n  toggleIncrementYear,\n}) => {\n  return (\n    <Space style={{ width: '100%' }} direction=\"vertical\">\n      <Space\n        direction=\"horizontal\"\n        style={{ justifyContent: 'space-between', width: '100%' }}\n      >\n        <Text strong>\n          Select a Year: <Text style={{ color: 'green' }}>{defaultYear}</Text>\n        </Text>\n        <Space direction=\"horizontal\" size=\"small\">\n          <Switch\n            onChange={(val) => toggleIncrementYear(!val)}\n            checked={!incrementYearDisabled}\n          />\n          <Text strong>\n            {incrementYearDisabled ? 'Enable' : 'Disable'} Auto Increment\n          </Text>\n        </Space>\n      </Space>\n      <Slider\n        min={minYear}\n        max={maxYear}\n        value={defaultYear}\n        onChange={onChange}\n      />\n    </Space>\n  );\n};\n","export const Constants = {\n  minWageUrl:\n    'https://gist.github.com/apetit2/212a7cd715f8ba34eb637d014fffb12f',\n  rentUrl: 'https://gist.github.com/apetit2/aaa39169ab48ff313cfb2bfe12486fef',\n} as const;\n","import { CSVRow } from './shared';\n\nexport interface MinimumWage extends CSVRow {\n  year?: number;\n  state?: string;\n  stateMinWage?: number;\n  stateMinWageTodayDollars?: number;\n  federalMinWage?: number;\n  federalMinWageTodayDollars?: number;\n  effectiveMinWage?: number;\n  effectiveMinWageTodayDollars?: number;\n  cpiAverage?: number;\n  depLaborUncleanData?: string;\n  depLaborCleanedLowValue?: number;\n  depLaborCleanedLowValueTodayDollars?: number;\n  depLaborCleanedHighValue?: number;\n  depLaborCleanedHighValueTodayDollars?: number;\n  footnote?: string;\n  studio?: number;\n  studioPercentOfRent?: number;\n  oneBedroom?: number;\n  oneBedroomPercentOfRent?: number;\n  twoBedroom?: number;\n  twoBedroomPercentOfRent?: number;\n  threeBedroom?: number;\n  threeBedroomPercentOfRent?: number;\n  fourBedroom?: number;\n  fourBedroomPercentOfRent?: number;\n  population?: number;\n}\n\nexport interface Rent extends CSVRow {\n  state?: string;\n  year?: number;\n  studio?: number;\n  oneBedroom?: number;\n  twoBedroom?: number;\n  threeBedroom?: number;\n  fourBedroom?: number;\n  population?: number;\n}\n\nexport const MinimumWageCols = {\n  year: 'Year',\n  state: 'State',\n  stateMinWage: 'State Minimum Wage',\n  stateMinWageTodayDollars: 'State Minimum Wage (2020 Dollars)',\n  federalMinWage: 'Federal Minimum Wage',\n  federalMinWageTodayDollars: 'Federal Minimum Wage (2020 Dollars)',\n  effectiveMinWage: 'Effective Minimum Wage',\n  effectiveMinWageTodayDollars: 'Effective Minimum Wage (2020 Dollars)',\n  cpiAverage: 'Average Consumer Price Index',\n  depLaborUncleanData: 'Dep. Of Labor Unclean Data',\n  depLaborCleanedLowValue: 'Dep. Of Labor Cleaned Low Value',\n  depLaborCleanedLowValueTodayDollars:\n    'Dep. Of Labor Cleaned Low Value (2020 Dollars)',\n  depLaborCleanedHighValue: 'Dep. Of Labor Cleaned High Value',\n  depLaborCleanedHighValueTodayDollars:\n    'Dep. Of Labor Cleaned High Value (2020 Dollars)',\n  footnote: 'Footnote',\n  studio: 'Average Studio Apartment Cost',\n  oneBedroom: 'Average One Bedroom Apartment Cost',\n  twoBedroom: 'Average Two Bedroom Apartment Cost',\n  threeBedroom: 'Average Three Bedroom Apartment Cost',\n  fourBedroom: 'Average Four Bedroom Apartment Cost',\n  studioPercentOfRent: 'Average Studio Cost as a Percent of Rent',\n  oneBedroomPercentOfRent: 'Average One Bedroom Apartment as a Percent of Rent',\n  twoBedroomPercentOfRent: 'Average Two Bedroom Apartment as a Percent of Rent',\n  threeBedroomPercentOfRent:\n    'Average Three Bedroom Apartment as a Percent of Rent',\n  fourBedroomPercentOfRent:\n    'Average Four Bedroom Apartment as a Percent of Rent',\n  population: 'Population',\n} as const;\n\nexport const RentCols = {\n  state: 'State',\n  year: 'Year',\n  studio: 'Average Studio Apartment Cost',\n  oneBedroom: 'Average One Bedroom Apartment Cost',\n  twoBedroom: 'Average Two Bedroom Apartment Cost',\n  threeBedroom: 'Average Three Bedroom Apartment Cost',\n  fourBedroom: 'Average Four Bedroom Apartment Cost',\n  population: 'Population',\n} as const;\n\nexport type MinimumWageCol = typeof MinimumWageCols;\n","// adapted from https://wattenberger.com/blog/react-and-d3\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Dimensions {\n  height: number;\n  width: number;\n  marginTop: number;\n  marginRight: number;\n  marginBottom: number;\n  marginLeft: number;\n}\n\ninterface CombinedDimensions extends Dimensions {\n  boundedHeight: number;\n  boundedWidth: number;\n}\n\nconst initialDimensions = {\n  height: 400,\n  width: 0,\n  marginTop: 10,\n  marginRight: 10,\n  marginBottom: 40,\n  marginLeft: 75,\n};\n\nconst combineChartDimensions: (dimensions: Dimensions) => CombinedDimensions = (\n  dimensions\n) => {\n  const parsedDimensions = {\n    ...dimensions,\n    marginTop: dimensions.marginTop || 10,\n    marginRight: dimensions.marginRight || 10,\n    marginBottom: dimensions.marginBottom || 40,\n    marginLeft: dimensions.marginLeft || 75,\n  } as Dimensions;\n\n  return {\n    ...parsedDimensions,\n    boundedHeight: Math.max(\n      parsedDimensions.height -\n        parsedDimensions.marginTop -\n        parsedDimensions.marginBottom,\n      0\n    ),\n    boundedWidth: Math.max(\n      parsedDimensions.width -\n        parsedDimensions.marginLeft -\n        parsedDimensions.marginRight,\n      0\n    ),\n  };\n};\n\nexport const useResizeChart = () => {\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  const [width, setWidth] = useState(initialDimensions.width);\n  const [height, setHeight] = useState(initialDimensions.height);\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver((entries) => {\n      if (!Array.isArray(entries) || !entries.length) {\n        return;\n      }\n\n      const entry = entries[0];\n      if (width !== entry.contentRect.width) {\n        setWidth(entry.contentRect.width);\n      }\n\n      if (height !== entry.contentRect.height) {\n        setHeight(entry.contentRect.height);\n      }\n    });\n\n    if (ref.current) {\n      const element = ref.current;\n      resizeObserver.observe(element);\n\n      return () => resizeObserver.unobserve(element);\n    }\n\n    return () => null;\n  }, [height, width]);\n\n  const newChartDimensions = combineChartDimensions({\n    ...initialDimensions,\n    width,\n    height,\n  });\n\n  return { ref, dimensions: newChartDimensions };\n};\n","import { Col, Row, Space, Typography } from 'antd';\n\nimport { ReactElement } from 'react';\nimport { useResizeChart } from '../hooks/useResizeChart';\n\nconst { Text } = Typography;\n\nexport interface PageLayoutProps {\n  pageTitle: string;\n  generateChart: (dimensions: {\n    width: number;\n    height: number;\n  }) => ReactElement;\n  description?: ReactElement;\n  menuItems?: ReactElement;\n  showDescriptionTitle?: boolean;\n}\n\nexport const PageLayout: React.FC<PageLayoutProps> = ({\n  pageTitle,\n  menuItems,\n  description,\n  generateChart,\n  showDescriptionTitle = true,\n}) => {\n  const { ref, dimensions } = useResizeChart();\n\n  return (\n    <div style={{ width: '100%' }} ref={ref}>\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <Row\n          style={{ width: '100%' }}\n          justify={menuItems ? 'space-between' : 'center'}\n          gutter={[0, 24]}\n        >\n          <Col flex={1} style={{ textAlign: 'center' }}>\n            <Text strong style={{ fontSize: 32 }}>\n              {pageTitle}\n            </Text>\n          </Col>\n          {menuItems && <Col flex={1}>{menuItems}</Col>}\n        </Row>\n        {generateChart(dimensions)}\n        <Space direction=\"vertical\">\n          {showDescriptionTitle && (\n            <Text strong style={{ fontSize: 24 }}>\n              Description\n            </Text>\n          )}\n          <Text style={{ fontSize: 14 }}>{description}</Text>\n        </Space>\n      </Space>\n    </div>\n  );\n};\n","import { Loading } from '../components/Loading/Loading';\nimport { Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport const useFallback = (\n  isLoading: boolean,\n  isError: boolean,\n  data: boolean\n) => {\n  let fallback = null;\n\n  if (isError) {\n    fallback = (\n      <Text strong style={{ color: 'red' }}>\n        Failed To Load Dataset.\n      </Text>\n    );\n  }\n\n  if (isLoading) {\n    fallback = <Loading />;\n  }\n\n  if (!data && !isLoading) {\n    fallback = <Text strong>No Data Found.</Text>;\n  }\n\n  return { fallback };\n};\n","import { useEffect } from 'react';\n\nexport const useIncrementYear = (\n  maxYear: number,\n  minYear: number,\n  shouldIncrement: boolean,\n  currentSelectedYear: number,\n  setYear: (year: number) => void\n) => {\n  useEffect(() => {\n    if (!shouldIncrement) {\n      return;\n    }\n\n    const interval = setInterval(() => {\n      if (currentSelectedYear === maxYear) {\n        setYear(minYear);\n      } else {\n        setYear(currentSelectedYear + 1);\n      }\n    }, 500);\n\n    // eslint-disable-next-line consistent-return\n    return () => clearInterval(interval);\n  }, [currentSelectedYear, shouldIncrement, setYear, maxYear, minYear]);\n};\n","const BASE_URL = 'https://gist.githubusercontent.com/apetit2/';\n\nexport const API = {\n  MinimumWageCSV: `${BASE_URL}212a7cd715f8ba34eb637d014fffb12f/raw/0cc5e300ed1747be91ec391f4546e1a44c90d810/minimum-wage-data.csv`,\n  RentCSV: `${BASE_URL}aaa39169ab48ff313cfb2bfe12486fef/raw/6d5308a46301f7f2b08c6974a3be7e7e138434f8/rent.csv`,\n  WorldMap: 'https://unpkg.com/world-atlas@1.1.4/world/110m.json',\n  USMap: 'https://unpkg.com/us-atlas@3.0.0/states-10m.json',\n};\n","import { USMap, WorldMap } from '../models/maps';\n\nimport { API } from '../apis';\n\nexport const fetchWorldMap = async () => {\n  const worldMap = (await (await fetch(API.WorldMap)).json()) as WorldMap;\n  return worldMap;\n};\n\nexport const fetchUSMap = async () => {\n  const usMap = (await (await fetch(API.USMap)).json()) as USMap;\n  return usMap;\n};\n","const CPI_TODAY = 260.28;\n\nexport const accountForInflation = (fromCPI: number, dollars: number) => {\n  return (dollars * fromCPI) / CPI_TODAY;\n};\n","import { DSVRowString, csv, DSVParsedArray } from 'd3';\nimport { accountForInflation } from '../../util/inflation';\n\nimport { API } from '../apis';\nimport { MinimumWage, Rent } from '../models/minimumWage';\n\nconst parseMinimumCsv: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => MinimumWage = (row) => {\n  return {\n    year: Number(row.Year),\n    state: row.State,\n    stateMinWage: Number(row['State.Minimum.Wage']),\n    stateMinWageTodayDollars: Number(row['State.Minimum.Wage.2020.Dollars']),\n    federalMinWage: Number(row['Federal.Minimum.Wage']),\n    federalMinWageTodayDollars: Number(\n      row['Federal.Minimum.Wage.2020.Dollars']\n    ),\n    effectiveMinWage: Number(row['Effective.Minimum.Wage']),\n    effectiveMinWageTodayDollars: Number(\n      row['Effective.Minimum.Wage.2020.Dollars']\n    ),\n    cpiAverage: Number(row['CPI.Average']),\n    depLaborUncleanData: row['Department.Of.Labor.Uncleaned.Data'],\n    depLaborCleanedLowValue: Number(\n      row['Department.Of.Labor.Cleaned.Low.Value']\n    ),\n    depLaborCleanedLowValueTodayDollars: Number(\n      row['Department.Of.Labor.Cleaned.Low.Value.2020.Dollars']\n    ),\n    depLaborCleanedHighValue: Number(\n      row['Department.Of.Labor.Cleaned.High.Value']\n    ),\n    depLaborCleanedHighValueTodayDollars: Number(\n      row['Department.Of.Labor.Cleaned.High.Value.2020.Dollars']\n    ),\n    footnote: row.Footnote,\n    rowType: 'MinWage',\n  };\n};\n\nconst parseRentCsv: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Rent = (row) => {\n  return {\n    state: row.State,\n    year: Number(row.Year),\n    studio: Number(row['Rent 0 BR']),\n    oneBedroom: Number(row['Rent 1 BR']),\n    twoBedroom: Number(row['Rent 2 BR']),\n    threeBedroom: Number(row['Rent 3 BR']),\n    fourBedroom: Number(row['Rent 4 BR']),\n    population: Number(row.Population),\n    rowType: 'Rent',\n  };\n};\n\nconst merge = (\n  rents: DSVParsedArray<Rent>,\n  minWages: DSVParsedArray<MinimumWage>\n) => {\n  const res = minWages.map((minWage) => {\n    const rent = rents.find(\n      (row) => row.year === minWage.year && row.state === minWage.state\n    );\n\n    if (!rent) {\n      return minWage;\n    }\n\n    return {\n      ...minWage,\n      studio: accountForInflation(minWage.cpiAverage!, rent.studio!),\n      studioPercentOfRent:\n        (accountForInflation(minWage.cpiAverage!, rent.studio!) /\n          (8 * minWage.effectiveMinWageTodayDollars! * 30)) *\n        100,\n      oneBedroom: accountForInflation(minWage.cpiAverage!, rent.oneBedroom!),\n      oneBedroomPercentOfRent:\n        (accountForInflation(minWage.cpiAverage!, rent.oneBedroom!) /\n          (8 * minWage.effectiveMinWageTodayDollars! * 30)) *\n        100,\n      twoBedroom: accountForInflation(minWage.cpiAverage!, rent.twoBedroom!),\n      twoBedroomPercentOfRent:\n        (accountForInflation(minWage.cpiAverage!, rent.twoBedroom!) /\n          (8 * minWage.effectiveMinWageTodayDollars! * 30)) *\n        100,\n      threeBedroom: accountForInflation(\n        minWage.cpiAverage!,\n        rent.threeBedroom!\n      ),\n      threeBedroomPercentOfRent:\n        (accountForInflation(minWage.cpiAverage!, rent.threeBedroom!) /\n          (8 * minWage.effectiveMinWageTodayDollars! * 30)) *\n        100,\n      fourBedroom: accountForInflation(minWage.cpiAverage!, rent.fourBedroom!),\n      fourBedroomPercentOfRent:\n        (accountForInflation(minWage.cpiAverage!, rent.fourBedroom!) /\n          (8 * minWage.effectiveMinWageTodayDollars! * 30)) *\n        100,\n      population: rent.population,\n    } as MinimumWage;\n  });\n\n  return res as DSVParsedArray<MinimumWage>;\n};\n\nexport const fetchMinimumWageCSV = async () => {\n  const minWages = await csv(API.MinimumWageCSV, parseMinimumCsv);\n  const rents = await csv(API.RentCSV, parseRentCsv);\n\n  return merge(rents, minWages);\n};\n\nexport const fetchRentCSV = async () => {\n  const res = await csv(API.RentCSV, parseRentCsv);\n  return res;\n};\n","import { ScaleLinear } from 'd3';\n\nexport interface AxisBottom {\n  xScale: ScaleLinear<number, number, never>;\n  height: number;\n  tickOffset?: number;\n}\n\nexport const AxisBottom: React.FC<AxisBottom> = ({\n  xScale,\n  height,\n  tickOffset = 3,\n}) => {\n  return (\n    <>\n      {xScale.ticks().map((tick) => (\n        <g\n          style={{ stroke: '#C0C0BB' }}\n          key={tick}\n          transform={`translate(${xScale(tick)}, 0)`}\n        >\n          <line y2={height} />\n          <text dy=\".71em\" textAnchor=\"middle\" y={height + tickOffset}>\n            {tick}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n","import { ScaleLinear } from 'd3';\n\nexport interface AxisLeftProps {\n  yScale: ScaleLinear<number, number, never>;\n  width: number;\n  tickOffset?: number;\n}\n\nexport const AxisLeft: React.FC<AxisLeftProps> = ({\n  yScale,\n  width,\n  tickOffset = 3,\n}) => (\n  <>\n    {yScale.ticks().map((tick) => (\n      <g\n        key={tick}\n        style={{ stroke: '#C0C0BB' }}\n        transform={`translate(0,${yScale(tick)})`}\n      >\n        <line x2={width} />\n        <text textAnchor=\"end\" x={-tickOffset} dy=\".32em\">\n          {tick}\n        </text>\n      </g>\n    ))}\n  </>\n);\n","import { forwardRef } from 'react';\nimport { animated, useSpring } from 'react-spring';\n\nexport interface AnimatedGroupProps extends React.HTMLAttributes<SVGGElement> {\n  transform?: string;\n}\n\nexport const AnimatedGroup = forwardRef<SVGGElement, AnimatedGroupProps>(\n  ({ children, ...rest }, ref) => {\n    const { opacity } = useSpring({\n      opacity: 1,\n      from: { opacity: 0 },\n      delay: 300,\n    });\n\n    return (\n      <animated.g ref={ref} {...rest} opacity={opacity}>\n        {children}\n      </animated.g>\n    );\n  }\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/no-array-index-key */\nimport {\n  DSVParsedArray,\n  extent,\n  interpolateTurbo,\n  scaleLinear,\n  scaleOrdinal,\n  line,\n  curveBasis,\n  brushX,\n  select,\n} from 'd3';\nimport {\n  PropsWithChildren,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { AxisBottom } from './AxisBottom';\nimport { AxisLeft } from './AxisLeft';\nimport { CSVRow } from '../../services/models/shared';\nimport { KeysMatching } from '../../types/shared';\nimport { AnimatedGroup } from '../AnimatedGroup';\nimport ReactTooltip from 'react-tooltip';\n\nexport interface LineChartProps<T extends CSVRow> {\n  filter?: (row: T) => boolean;\n  grouping: KeysMatching<T, string | undefined>;\n  width: number;\n  height: number;\n  margin: { top: number; right: number; bottom: number; left: number };\n  x: KeysMatching<T, number | undefined>;\n  y: KeysMatching<T, number | undefined>;\n  xLabel: string;\n  yLabel: string;\n  opacity?: string;\n  data: DSVParsedArray<T>;\n  strokeWidth?: number;\n  stroke?: string;\n  focusable?: boolean;\n  cords?: { x: number; y: number }[];\n  renderToolTip?: (row: T | undefined, color: string) => ReactElement;\n}\n\nconst xAxisLabelOffset = 50;\nconst brushedSectionSize = 0.2;\n\nconst filterData = <T extends CSVRow>(\n  data: DSVParsedArray<T>,\n  grouping: KeysMatching<T, string | undefined>,\n  filter?: (row: T) => boolean,\n  brushExtent?: [number, number],\n  x?: KeysMatching<T, number | undefined>,\n  y?: KeysMatching<T, number | undefined>\n) => {\n  const lines: T[][] = [];\n  let rowIndex = 0;\n  // no great way to make this efficient\n  data\n    .filter((row) => {\n      if (\n        !x ||\n        (row[x] as unknown) === undefined ||\n        !y ||\n        (row[y] as unknown) === undefined\n      ) {\n        return false;\n      }\n      if (brushExtent && x) {\n        return (\n          (filter === undefined || filter(row)) &&\n          (row[x] as number) >= brushExtent[0] &&\n          (row[x] as number) <= brushExtent[1]\n        );\n      }\n\n      return filter === undefined || filter(row);\n    })\n    .sort((rowOne, rowTwo) => {\n      return (rowOne[grouping] as string).localeCompare(\n        rowTwo[grouping] as string\n      );\n    })\n    .forEach((row, index, arr) => {\n      if (\n        index >= 1 &&\n        (row[grouping] as string) !== (arr[index - 1][grouping] as string)\n      ) {\n        lines.push([row]);\n        rowIndex += 1;\n      } else if (index === 0) {\n        lines.push([row]);\n      } else {\n        lines[rowIndex].push(row);\n      }\n    });\n\n  return lines;\n};\n\nexport const LineChart = <T extends CSVRow>({\n  filter,\n  grouping,\n  width,\n  height = 400,\n  margin,\n  x,\n  y,\n  xLabel,\n  yLabel,\n  data,\n  opacity = '.3',\n  strokeWidth = 3,\n  stroke,\n  focusable = true,\n  cords,\n  renderToolTip,\n}: PropsWithChildren<LineChartProps<T>>) => {\n  const [brushExtent, setBrushExtent] = useState<[number, number]>();\n  const brushRef = useRef<SVGGElement>(null);\n\n  const xValue = useCallback((row: T) => row[x] as number, [x]);\n  const yValue = useCallback((row: T) => row[y] as number, [y]);\n  const colorValue = useCallback(\n    (row: T) => row[grouping] as string,\n    [grouping]\n  );\n\n  const brushedSectionHeight = useMemo(\n    () => brushedSectionSize * height,\n    [height]\n  );\n\n  const yRange = useMemo(\n    () => extent(data, yValue) as [number, number],\n    [data, yValue]\n  );\n  const xRange = useMemo(\n    () =>\n      extent(\n        data.filter((row) => filter === undefined || filter(row)),\n        xValue\n      ) as [number, number],\n    [data, xValue, filter]\n  );\n\n  const focusXRange = useMemo(\n    () =>\n      extent(\n        data.filter((row) => filter === undefined || filter(row)),\n        xValue\n      ) as [number, number],\n    [data, xValue, filter]\n  );\n\n  const paddedHeight = useMemo(\n    () => height - margin.top - margin.bottom,\n    [height, margin]\n  );\n  const paddedWidth = useMemo(\n    () => width - margin.left - margin.right,\n    [width, margin]\n  );\n\n  const xScale = useMemo(\n    () =>\n      scaleLinear()\n        .domain(brushExtent || xRange)\n        .range([0, paddedWidth])\n        .nice(),\n    [paddedWidth, xRange, brushExtent]\n  );\n  const yScale = useMemo(\n    () => scaleLinear().domain(yRange).range([paddedHeight, 0]),\n    [paddedHeight, yRange]\n  );\n  const focusXScale = useMemo(\n    () => scaleLinear().domain(focusXRange).range([0, paddedWidth]).nice(),\n    [paddedWidth, focusXRange]\n  );\n  const focusYScale = useMemo(\n    () =>\n      scaleLinear()\n        .domain(yRange)\n        .range([height * brushedSectionSize, 0]),\n    [yRange, height]\n  );\n\n  const colorScale = useMemo(() => {\n    const uniqueOrdinalValues = Array.from(new Set(data.map(colorValue)));\n    const numUniqueOrdinalValues = uniqueOrdinalValues.length;\n\n    const colors = uniqueOrdinalValues.map((_, index) => {\n      return interpolateTurbo(index / numUniqueOrdinalValues);\n    });\n    return scaleOrdinal<string>().domain(data.map(colorValue)).range(colors);\n  }, [data, colorValue]);\n\n  const marginsForAxes = useMemo(\n    () => ({\n      ...margin,\n      left: yRange[1].toString().length * 8.75 + 20,\n    }),\n    [margin, yRange]\n  );\n\n  const yAxisLabelOffset = useMemo(\n    () => yRange[1].toString().length * 8.75 + 10,\n    [yRange]\n  );\n\n  const drawLines = useMemo(() => {\n    return line<T>()\n      .x((row) => xScale(xValue(row)))\n      .y((row) => yScale(yValue(row)))\n      .curve(curveBasis);\n  }, [xScale, yScale, yValue, xValue]);\n\n  const drawFocus = useMemo(() => {\n    return line<T>()\n      .x((row) => focusXScale(xValue(row)))\n      .y((row) => focusYScale(yValue(row)))\n      .curve(curveBasis);\n  }, [focusXScale, focusYScale, yValue, xValue]);\n\n  useEffect(() => {\n    if (brushRef.current && paddedWidth > 0) {\n      const brush = brushX().extent([\n        [0, 0],\n        [paddedWidth, brushedSectionHeight],\n      ]);\n      brush(select<SVGGElement, unknown>(brushRef.current));\n      brush.on('brush end', (event) => {\n        setBrushExtent(\n          event.selection && event.selection.map(focusXScale.invert)\n        );\n      });\n    }\n  }, [paddedWidth, brushedSectionHeight, brushRef, focusXScale]);\n\n  const lines = useMemo(\n    () => filterData(data, grouping, filter, brushExtent, x, y),\n    [data, grouping, filter, brushExtent, x, y]\n  );\n\n  const focusLines = useMemo(() => {\n    if (focusable) {\n      return filterData(data, grouping, filter);\n    }\n    return undefined;\n  }, [data, grouping, filter, focusable]);\n\n  const findFieldByValue = (value: string): T | undefined => {\n    return data.find((el) => (el[grouping!] as string) === value);\n  };\n\n  return (\n    <>\n      <svg\n        width={width}\n        height={focusable ? height + height * brushedSectionSize + 50 : height}\n      >\n        <g\n          transform={`translate(${marginsForAxes.left},${marginsForAxes.top})`}\n        >\n          <AxisBottom xScale={xScale} height={paddedHeight} tickOffset={10} />\n\n          <text\n            className=\"axis-label\"\n            textAnchor=\"middle\"\n            transform={`translate(${-yAxisLabelOffset},${\n              paddedHeight / 2\n            }) rotate(-90)`}\n          >\n            {yLabel}\n          </text>\n\n          <AxisLeft yScale={yScale} width={paddedWidth} tickOffset={5} />\n\n          {!focusable && (\n            <text\n              className=\"axis-label\"\n              x={paddedWidth / 2}\n              y={paddedHeight + xAxisLabelOffset}\n              textAnchor=\"middle\"\n            >\n              {xLabel}\n            </text>\n          )}\n\n          <AnimatedGroup>\n            {lines.map((toDrawLine) => (\n              <path\n                data-tip={(toDrawLine[0] as any)[grouping]}\n                data-for=\"line-tooltip\"\n                key={toDrawLine[0][grouping]}\n                d={drawLines(toDrawLine)!}\n                stroke={stroke || colorScale(colorValue(toDrawLine[0]))}\n                strokeWidth={strokeWidth}\n                opacity={opacity}\n                fill=\"none\"\n              />\n            ))}\n            {cords &&\n              cords.map(({ x: cordX, y: cordY }) => (\n                <circle\n                  key={`cord-${cordX}-${cordY}`}\n                  cx={xScale(cordX)}\n                  cy={yScale(cordY)}\n                  fill=\"red\"\n                  opacity=\"0.4\"\n                  r={8}\n                />\n              ))}\n          </AnimatedGroup>\n        </g>\n        {focusable && (\n          <AnimatedGroup\n            ref={brushRef}\n            transform={`translate(${marginsForAxes.left}, ${\n              height + margin.bottom + margin.top - brushedSectionHeight\n            })`}\n          >\n            <AxisBottom\n              xScale={focusXScale}\n              height={brushedSectionHeight}\n              tickOffset={10}\n            />\n\n            {focusLines?.map((toDrawLine) => (\n              <path\n                key={toDrawLine[0][grouping]}\n                d={drawFocus(toDrawLine)!}\n                stroke={stroke || colorScale(colorValue(toDrawLine[0]))}\n                strokeWidth={strokeWidth}\n                opacity={opacity}\n                fill=\"none\"\n              />\n            ))}\n          </AnimatedGroup>\n        )}\n      </svg>\n      {renderToolTip && (\n        <ReactTooltip\n          id=\"line-tooltip\"\n          place=\"top\"\n          effect=\"float\"\n          getContent={(val) => {\n            const row = findFieldByValue(val);\n            return renderToolTip(row, val);\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import { Col, Row, Select, Space, Typography } from 'antd';\n\nimport { CSVRow } from '../../services/models/shared';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { KeysMatching } from '../../types/shared';\nimport { CSSProperties, PropsWithChildren } from 'react';\n\nconst { Text } = Typography;\nconst { Option } = Select;\n\nexport interface LineChartAxesProps<T extends CSVRow> {\n  id?: string;\n  selectedX: KeysMatching<T, number | undefined>;\n  selectedY: KeysMatching<T, number | undefined>;\n  onSelectX: (xAxis: KeysMatching<T, number | undefined>) => void;\n  onSelectY: (yAxis: KeysMatching<T, number | undefined>) => void;\n  data: DSVParsedArray<T>;\n  labels: Record<string, string>;\n  style?: CSSProperties;\n}\n\nexport const LineChartAxes = <T extends CSVRow>({\n  id = 'container',\n  selectedX,\n  selectedY,\n  onSelectX,\n  onSelectY,\n  data,\n  labels,\n  style,\n}: PropsWithChildren<LineChartAxesProps<T>>) => {\n  // this is probably not the best way of doing this\n  const numericOptions = Object.entries(data[0])\n    .filter((col) => typeof col[1] === 'number')\n    .map((col) => col[0]);\n\n  return (\n    <Row style={style} gutter={12}>\n      <Col flex=\"1\">\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text id={`${id}-x-axis-label`} strong style={{ fontSize: 12 }}>\n            X Axis:\n          </Text>\n          <Select\n            aria-labelledby={`${id}-x-axis-label`}\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedX as string}\n            onChange={onSelectX as (value: string) => void}\n          >\n            {numericOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col flex=\"1\">\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Y Axis:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedY as string}\n            onChange={onSelectY as (value: string) => void}\n          >\n            {numericOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n    </Row>\n  );\n};\n","import { ScaleLinear } from 'd3';\nimport { currencyFormatter } from '../../util/currency';\n\nexport interface AxisBottom {\n  xScale: ScaleLinear<number, number, never>;\n  yScale: ScaleLinear<number, number, never>;\n  width: number;\n  height: number;\n  tickOffset?: number;\n  isDollarValue?: boolean;\n}\n\nexport const AxisBottom: React.FC<AxisBottom> = ({\n  xScale,\n  yScale,\n  width,\n  height,\n  tickOffset = 3,\n  isDollarValue = false,\n}) => {\n  const firstTick = xScale.ticks()[0];\n  const hasThirty = xScale.ticks().find((tick) => tick >= 30);\n\n  return (\n    <>\n      <defs>\n        <linearGradient id=\"Gradient-1\" x1=\"3%\" y1=\"4%\" x2=\"6%\" y2=\"6%\">\n          <stop offset=\"0%\" stopColor=\"red\" />\n          <stop offset=\"50%\" stopColor=\"white\" />\n        </linearGradient>\n\n        <linearGradient\n          id=\"repeat\"\n          xlinkHref=\"#Gradient-1\"\n          spreadMethod=\"repeat\"\n        />\n\n        <marker\n          id=\"arrowhead\"\n          markerWidth=\"10\"\n          markerHeight=\"7\"\n          refX=\"0\"\n          refY=\"3.5\"\n          orient=\"auto\"\n        >\n          <polygon\n            points=\"0 0, 10 3.5, 0 7\"\n            fill={firstTick >= 30 ? 'red' : '#C0C0BB'}\n          />\n        </marker>\n      </defs>\n      <g>\n        <line\n          y1={height / 2}\n          y2={height}\n          stroke={firstTick >= 30 ? 'red' : '#C0C0BB'}\n          markerEnd=\"url(#arrowhead)\"\n        />\n        <text\n          x=\"0\"\n          y=\"-4%\"\n          textAnchor=\"middle\"\n          stroke={firstTick >= 30 ? 'red' : '#C0C0BB'}\n        >\n          higher wage\n        </text>\n      </g>\n      <g>\n        <line\n          y1={height / 2}\n          y2={0}\n          stroke={firstTick >= 30 ? 'red' : '#C0C0BB'}\n          markerEnd=\"url(#arrowhead)\"\n        />\n        <text\n          x=\"0\"\n          y=\"76%\"\n          textAnchor=\"middle\"\n          stroke={firstTick >= 30 ? 'red' : '#C0C0BB'}\n        >\n          lower wage\n        </text>\n      </g>\n\n      {hasThirty && (\n        <polygon\n          points={`${xScale(\n            firstTick > 30 ? firstTick : 30\n          )},${height} ${width},${height} ${width},0 ${xScale(\n            firstTick > 30 ? firstTick : 30\n          )},0`}\n          fill=\"url(#repeat)\"\n          stroke=\"red\"\n          strokeWidth=\"2px\"\n        />\n      )}\n\n      {xScale.ticks().map((tick, index) => (\n        <>\n          <g\n            style={{ stroke: '#C0C0BB' }}\n            key={tick}\n            transform={`translate(0, ${yScale.range()[0] / 2})`}\n          >\n            <line x1={0} x2={width} />\n            <line\n              y1={-tickOffset}\n              y2={tickOffset}\n              x1={xScale(tick)}\n              x2={xScale(tick)}\n              stroke={tick >= 30 && index === 0 ? 'red' : '#C0C0BB'}\n            />\n            <text\n              dy=\".71em\"\n              textAnchor=\"middle\"\n              y={tickOffset}\n              x={xScale(tick)}\n              stroke={tick >= 30 && index === 0 ? 'red' : '#C0C0BB'}\n            >\n              {isDollarValue ? currencyFormatter.format(tick) : `${tick}%`}\n            </text>\n\n            {tick === 30 && index > 0 && (\n              <line\n                y1={height - 140}\n                y2={-(height - 140)}\n                x1={xScale(tick)}\n                x2={xScale(tick)}\n                stroke=\"red\"\n              />\n            )}\n          </g>\n        </>\n      ))}\n    </>\n  );\n};\n","/* eslint-disable react/no-array-index-key */\nimport {\n  DSVParsedArray,\n  extent,\n  interpolateTurbo,\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3';\n\nimport { AxisBottom } from './AxisBottom';\nimport { CSVRow } from '../../services/models/shared';\nimport { KeysMatching } from '../../types/shared';\nimport { AnimatedGroup } from '../AnimatedGroup';\nimport { PropsWithChildren, useCallback, useMemo, ReactElement } from 'react';\nimport ReactTooltip from 'react-tooltip';\n\nexport interface ScatterPlotProps<T extends CSVRow> {\n  width: number;\n  height: number;\n  margin: { top: number; right: number; bottom: number; left: number };\n  x: KeysMatching<T, number | undefined>;\n  y: KeysMatching<T, number | undefined>;\n  xLabel: string;\n  yLabel: string;\n  color?: KeysMatching<T, string | undefined>;\n  radius: number;\n  data: DSVParsedArray<T>;\n  opacity?: string;\n  isXAxisDollarValue?: boolean;\n  circleText?: (val: string) => string;\n  renderToolTip?: (row: T | undefined, color: string) => ReactElement;\n}\n\nexport const ScatterPlot = <T extends CSVRow>({\n  width,\n  height = 400,\n  margin,\n  x,\n  y,\n  xLabel,\n  yLabel,\n  color,\n  radius,\n  data,\n  opacity = '.3',\n  isXAxisDollarValue,\n  circleText,\n  renderToolTip,\n}: PropsWithChildren<ScatterPlotProps<T>>) => {\n  const xAxisLabelOffset = 50;\n\n  const xValue = useCallback((row: T) => row[x] as number, [x]);\n  const yValue = useCallback((row: T) => row[y] as number, [y]);\n  const colorValue = useCallback(\n    (row: T) => {\n      return color ? (row[color] as string) : undefined;\n    },\n    [color]\n  );\n\n  const xRange = useMemo(() => {\n    return extent(data, xValue) as [number, number];\n  }, [xValue, data]);\n\n  const yRange = useMemo(() => {\n    return extent(data, yValue) as [number, number];\n  }, [yValue, data]);\n\n  const paddedHeight = useMemo(() => {\n    return height - margin.top - margin.bottom;\n  }, [height, margin]);\n\n  const paddedWidth = useMemo(() => {\n    return width - margin.left - margin.right;\n  }, [width, margin]);\n\n  const xScale = useMemo(() => {\n    return scaleLinear().domain(xRange).range([0, paddedWidth]).nice();\n  }, [xRange, paddedWidth]);\n\n  const yScale = useMemo(() => {\n    return scaleLinear().domain(yRange).range([paddedHeight, 0]);\n  }, [yRange, paddedHeight]);\n\n  const { colorScale } = useMemo(() => {\n    if (color) {\n      const uniqueOrdinalValues = Array.from(\n        new Set(data.map(colorValue))\n      ) as string[];\n      const numUniqueOrdinalValues = uniqueOrdinalValues.length;\n      const range = uniqueOrdinalValues.map((_, index) => {\n        return interpolateTurbo(index / numUniqueOrdinalValues);\n      });\n\n      const scale = scaleOrdinal<string>()\n        .domain(data.map(colorValue as (row: T) => string))\n        .range(range);\n\n      return { colorRange: range, colorScale: scale };\n    }\n\n    return { colorRange: undefined, colorScale: undefined };\n  }, [colorValue, data, color]);\n\n  const marginsForAxes = useMemo(() => {\n    return {\n      ...margin,\n      left: yRange[1].toString().length * 8.75 + 20,\n    };\n  }, [yRange, margin]);\n\n  const yAxisLabelOffset = useMemo(() => {\n    return yRange[1].toString().length * 8.75 + 10;\n  }, [yRange]);\n\n  const yAxisLabel = useMemo(() => {\n    return (\n      <text\n        className=\"axis-label\"\n        textAnchor=\"middle\"\n        transform={`translate(${-yAxisLabelOffset},${\n          paddedHeight / 2\n        }) rotate(-90)`}\n      >\n        {yLabel}\n      </text>\n    );\n  }, [yAxisLabelOffset, paddedHeight, yLabel]);\n\n  const findFieldByValue = (value: string): T | undefined => {\n    return data.find((el) => (el[color!] as string) === value);\n  };\n\n  return (\n    <>\n      <svg width={width} height={height}>\n        <g\n          transform={`translate(${marginsForAxes.left},${marginsForAxes.top})`}\n        >\n          <AxisBottom\n            xScale={xScale}\n            yScale={yScale}\n            width={paddedWidth}\n            height={paddedHeight}\n            tickOffset={10}\n            isDollarValue={isXAxisDollarValue}\n          />\n\n          {yAxisLabel}\n\n          <text\n            className=\"axis-label\"\n            x={paddedWidth / 2}\n            y={paddedHeight + xAxisLabelOffset}\n            textAnchor=\"middle\"\n          >\n            {xLabel}\n          </text>\n\n          <AnimatedGroup>\n            {data.map((row, index) => {\n              return (\n                <g data-tip={colorValue(row)} data-for=\"tooltip\" key={index}>\n                  <circle\n                    cx={xScale(xValue(row))}\n                    cy={yScale(yValue(row))}\n                    r={radius}\n                    opacity={opacity}\n                    fill={colorScale ? colorScale(colorValue(row)!) : 'green'}\n                  />\n                  {circleText && (\n                    <text\n                      x={xScale(xValue(row))}\n                      y={yScale(yValue(row))}\n                      textAnchor=\"middle\"\n                      strokeWidth=\"1px\"\n                      opacity={opacity}\n                      dy=\".3em\"\n                      style={{ cursor: 'pointer' }}\n                    >\n                      {circleText(colorValue(row)!)}\n                    </text>\n                  )}\n                </g>\n              );\n            })}\n          </AnimatedGroup>\n        </g>\n      </svg>\n      {renderToolTip && (\n        <ReactTooltip\n          id=\"tooltip\"\n          place=\"top\"\n          effect=\"solid\"\n          getContent={(val) => {\n            const row = findFieldByValue(val);\n            return renderToolTip(row, val);\n          }}\n        />\n      )}\n    </>\n  );\n};\n","const StateAbbreviation = {\n  alabama: 'AL',\n  alaska: 'AK',\n  arizona: 'AZ',\n  arkansas: 'AR',\n  california: 'CA',\n  colorado: 'CO',\n  connecticut: 'CT',\n  delaware: 'DE',\n  'district of colombia': 'DC',\n  florida: 'FL',\n  georgia: 'GA',\n  hawaii: 'HI',\n  idaho: 'ID',\n  illinois: 'IL',\n  indiana: 'IN',\n  iowa: 'IA',\n  kansas: 'KS',\n  kentucky: ' KY',\n  louisiana: 'LA',\n  maine: 'ME',\n  maryland: 'MD',\n  massachusetts: 'MA',\n  michigan: 'MI',\n  minnesota: 'MN',\n  mississippi: 'MS',\n  missouri: 'MO',\n  montana: 'MT',\n  nebraska: 'NE',\n  nevada: 'NV',\n  'new hampshire': 'NH',\n  'new jersey': 'NJ',\n  'new mexico': 'NM',\n  'new york': 'NY',\n  'north carolina': 'NC',\n  'north dakota': 'ND',\n  ohio: 'OH',\n  oklahoma: 'OK',\n  oregon: 'OR',\n  pennsylvania: ' PA',\n  'rhode island': 'RI',\n  'south carolina': 'SC',\n  'south dakota': 'SD',\n  tennessee: 'TN',\n  texas: 'TX',\n  utah: 'UT',\n  vermont: 'VT',\n  virginia: 'VA',\n  washington: 'WA',\n  'west virginia': 'WV',\n  wisconsin: 'WI',\n  wyoming: 'WY',\n  'american samoa': 'AS',\n  guam: 'GU',\n  'northern mariana islands': 'MP',\n  'puerto rico': 'PR',\n  'u.s. virgin islands': 'VI',\n  'u.s. minor outlying islands': 'UM',\n  'marshall islands': 'MH',\n  micronesia: 'FM',\n  palau: 'PW',\n} as const;\n\ntype State = keyof typeof StateAbbreviation;\n\nexport const convertStateToAbbreviation = (state: string) => {\n  const lowercase = state.toLowerCase() as State;\n  return StateAbbreviation[lowercase];\n};\n","import { Col, Row, Select, Space, Typography } from 'antd';\n\nimport { CSVRow } from '../../services/models/shared';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { KeysMatching } from '../../types/shared';\nimport { PropsWithChildren } from 'react';\n\nconst { Text } = Typography;\nconst { Option } = Select;\n\nexport interface ScatterPlotAxesProps<T extends CSVRow> {\n  id: string;\n  selectedX: KeysMatching<T, number | undefined>;\n  selectedY: KeysMatching<T, number | undefined>;\n  selectedColor: KeysMatching<T, string | undefined>;\n  onSelectX: (xAxis: KeysMatching<T, number | undefined>) => void;\n  onSelectY: (yAxis: KeysMatching<T, number | undefined>) => void;\n  onSelectColor: (color: KeysMatching<T, string | undefined>) => void;\n  data: DSVParsedArray<T>;\n  labels: Record<string, string>;\n}\n\nexport const ScatterPlotAxes = <T extends CSVRow>({\n  id,\n  selectedX,\n  selectedY,\n  selectedColor,\n  onSelectX,\n  onSelectY,\n  onSelectColor,\n  data,\n  labels,\n}: PropsWithChildren<ScatterPlotAxesProps<T>>) => {\n  // this is probably not the best way of doing this\n  const numericOptions = Object.entries(data[0])\n    .filter((col) => typeof col[1] === 'number')\n    .map((col) => col[0]);\n\n  const stringOptions = Object.entries(data[0])\n    .filter((col) => typeof col[1] === 'string')\n    .map((col) => col[0]);\n\n  return (\n    <Row style={{ width: '100%' }} gutter={[12, 12]}>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text id={`${id}-x-axis-label`} strong style={{ fontSize: 12 }}>\n            X Axis:\n          </Text>\n          <Select\n            aria-labelledby={`${id}-x-axis-label`}\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedX as string}\n            onChange={onSelectX as (value: string) => void}\n          >\n            {numericOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Y Axis:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedY as string}\n            onChange={onSelectY as (value: string) => void}\n          >\n            {numericOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Color:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedColor as string}\n            onChange={onSelectColor as (value: string) => void}\n          >\n            {stringOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n    </Row>\n  );\n};\n","// TODO: this needs to be broken down into many parts\n\nimport {\n  GeospatialChart,\n  YearSelector,\n} from '../../components/GeospatialChart';\nimport { Button, Col, Divider, Row, Select, Space, Typography } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport { Constants } from './constants';\nimport {\n  MinimumWage,\n  MinimumWageCols,\n} from '../../services/models/minimumWage';\nimport { PageLayout } from '../../layout/PageLayout';\nimport { useFallback } from '../../hooks/useFallback';\nimport { useIncrementYear } from '../../hooks/useIncrementYear';\nimport {\n  useMinimumWageQuery,\n  useUSMapQuery,\n} from '../../services/hooks/useQuery';\nimport { useMemo, useState } from 'react';\nimport { currencyFormatter } from '../../util/currency';\nimport { LineChart, LineChartAxes } from '../../components/LineChart';\nimport { DSVParsedArray } from 'd3';\nimport { ScatterPlot } from '../../components/ScatterPlot';\nimport { convertStateToAbbreviation } from '../../util/convertStateToAbbreviation';\nimport { KeysMatching } from '../../types/shared';\n\nexport interface FinalVisPageProps {}\n\nconst { Text } = Typography;\n\nconst generateScatterPlotXAxisText = (\n  val:\n    | 'twoBedroomPercentOfRent'\n    | 'studioPercentOfRent'\n    | 'oneBedroomPercentOfRent'\n    | 'threeBedroomPercentOfRent'\n    | 'fourBedroomPercentOfRent'\n) => {\n  switch (val) {\n    case 'studioPercentOfRent':\n      return 'Studio';\n    case 'oneBedroomPercentOfRent':\n      return 'One Bedroom Apartment';\n    case 'twoBedroomPercentOfRent':\n      return 'Two Bedroom Apartment';\n    case 'threeBedroomPercentOfRent':\n      return 'Three Bedroom Apartment';\n    case 'fourBedroomPercentOfRent':\n      return 'Four Bedroom Apartment';\n    default:\n      return '';\n  }\n};\n\nexport const FinalVisPage: React.FC<FinalVisPageProps> = () => {\n  const { data, isError, isLoading } = useMinimumWageQuery();\n\n  const {\n    data: usMap,\n    isError: isUSMapError,\n    isLoading: isLoadingUSMap,\n  } = useUSMapQuery();\n\n  const minYear = data?.[0].year || 1968;\n  const maxYear = data?.[data.length - 1]?.year || 2020;\n\n  const minScatterPlotYear = 2001;\n  const maxScatterPlotYear = 2020;\n\n  const [shouldDisableAutoIncrement, setShouldDisableAutoIncrementYear] =\n    useState(true);\n  const [\n    shouldDisableScatterPlotAutoIncrement,\n    setShouldDisableScatterPlotAutoIncrement,\n  ] = useState(true);\n  const [selectedYear, setSelectedYear] = useState(minYear);\n  const [selectedScatterPlotYear, setSelectedScatterPlotYear] =\n    useState(minScatterPlotYear);\n  const [selectedState, setSelectedState] = useState('all');\n  const [selectedRent, setSelectedRent] = useState<\n    | 'twoBedroomPercentOfRent'\n    | 'studioPercentOfRent'\n    | 'oneBedroomPercentOfRent'\n    | 'threeBedroomPercentOfRent'\n    | 'fourBedroomPercentOfRent'\n  >('twoBedroomPercentOfRent');\n\n  // line chart\n  const [lineGraphX, setLineGraphX] =\n    useState<KeysMatching<MinimumWage, number | undefined>>('year');\n  const [lineGraphY, setLineGraphY] = useState<\n    KeysMatching<MinimumWage, number | undefined>\n  >('effectiveMinWageTodayDollars');\n\n  const filteredData = useMemo(() => {\n    return data?.filter(\n      (row) => row.studio && row.year === selectedScatterPlotYear\n    ) as DSVParsedArray<MinimumWage> | undefined;\n  }, [data, selectedScatterPlotYear]);\n\n  const { fallback } = useFallback(\n    isLoading || isLoadingUSMap,\n    isError || isUSMapError,\n    Boolean(data && usMap)\n  );\n\n  useIncrementYear(\n    maxYear,\n    minYear,\n    !shouldDisableAutoIncrement,\n    selectedYear || 1968,\n    setSelectedYear\n  );\n\n  useIncrementYear(\n    maxScatterPlotYear,\n    minScatterPlotYear,\n    !shouldDisableScatterPlotAutoIncrement,\n    selectedScatterPlotYear,\n    setSelectedScatterPlotYear\n  );\n\n  const xAxisLabel = `${generateScatterPlotXAxisText(\n    selectedRent\n  )} Cost as a Percent of Earnings`;\n  const yAxisLabel = 'Minimum Wage ($/hour)';\n\n  if (fallback || !data || !usMap || !filteredData) {\n    return fallback;\n  }\n\n  const description = (\n    <Space direction=\"vertical\">\n      <Divider />\n      <Text strong style={{ fontSize: 24 }}>\n        Description\n      </Text>\n      <Text>\n        A geospatial chart depicting effective minimum wage data for all U.S\n        states and territories since 1968. It visualizes data supplied by the\n        U.S Department of Labor. All data can be found in the{' '}\n        <Link to={{ pathname: Constants.minWageUrl }} target=\"_blank\">\n          Minimum Wage Dataset\n        </Link>\n        .\n      </Text>\n      <ul>\n        <li>Dollar amounts shown are in 2020 dollars.</li>\n        <li>Darker state colors represent higher minimum wages.</li>\n      </ul>\n      <Divider />\n      <Text strong style={{ fontSize: 24 }}>\n        What&apos;s New\n      </Text>\n      <ul>\n        <li>Toggle that automates incrementing year</li>\n        <li>Legend showing what colors represent on the geospatial chart</li>\n        <li>\n          When hovering on a state, show the effective minimum wage for that\n          state in a box below the chart\n        </li>\n        <li>Zoom and pan functionality is working.</li>\n      </ul>\n      <Divider />\n      <Text strong style={{ fontSize: 24 }}>\n        Still To Do\n      </Text>\n      <ul>\n        <li>\n          For smaller screen sizes, figure out why the chart does not center\n          properly on load\n        </li>\n        <li>\n          Implement an actual tooltip that appears when hovering on a state\n        </li>\n      </ul>\n    </Space>\n  );\n\n  return (\n    <PageLayout\n      pageTitle=\"Final Visualization Project\"\n      description={description}\n      showDescriptionTitle={false}\n      generateChart={({ width }) => (\n        <>\n          <Row justify=\"space-between\" style={{ width }}>\n            <Col style={{ width: '30%', display: 'block', margin: 'auto' }}>\n              <YearSelector\n                defaultYear={selectedYear}\n                minYear={minYear}\n                maxYear={maxYear}\n                incrementYearDisabled={shouldDisableAutoIncrement}\n                toggleIncrementYear={setShouldDisableAutoIncrementYear}\n                onChange={setSelectedYear}\n              />\n            </Col>\n            <Col style={{ width: '50%' }}>\n              <Space\n                direction=\"vertical\"\n                size=\"middle\"\n                style={{ width: '100%' }}\n              >\n                <Space\n                  direction=\"horizontal\"\n                  size=\"small\"\n                  style={{\n                    justifyContent: 'space-between',\n                    width: '100%',\n                    paddingLeft: '50%',\n                  }}\n                >\n                  <Text strong style={{ fontSize: 24 }}>\n                    {selectedState !== 'all' ? selectedState : 'All States'}\n                  </Text>\n                  <Button\n                    type=\"ghost\"\n                    onClick={() => setSelectedState('all')}\n                    disabled={selectedState === 'all'}\n                  >\n                    Reset\n                  </Button>\n                </Space>\n                <LineChartAxes<MinimumWage>\n                  selectedX={lineGraphX}\n                  selectedY={lineGraphY}\n                  onSelectX={setLineGraphX}\n                  onSelectY={setLineGraphY}\n                  data={data}\n                  labels={MinimumWageCols}\n                  style={{ paddingLeft: '25%', width: '100%' }}\n                />\n              </Space>\n            </Col>\n          </Row>\n          <Row style={{ width }}>\n            <Col flex={1}>\n              <GeospatialChart<MinimumWage>\n                width={width / 2}\n                height={400}\n                rows={data}\n                data={usMap}\n                timeField=\"year\"\n                stateField=\"state\"\n                colorRepresentation=\"effectiveMinWageTodayDollars\"\n                chosenTimeField={selectedYear}\n                onClick={(_, state) => setSelectedState(state)}\n                chosenState={selectedState}\n                showLegend\n                renderToolTip={(state, minWage) => (\n                  <Space direction=\"vertical\">\n                    <Text style={{ color: 'white' }}>State: {state}</Text>\n                    <Text style={{ color: 'white' }}>\n                      Effective Minimum Wage:{' '}\n                      {currencyFormatter.format(minWage)}\n                    </Text>\n                  </Space>\n                )}\n              />\n            </Col>\n            <Col flex={1}>\n              <LineChart<MinimumWage>\n                width={width / 2}\n                height={400}\n                margin={{ top: 30, right: 30, bottom: 50, left: 0 }}\n                data={data}\n                xLabel={MinimumWageCols[lineGraphX]}\n                yLabel={MinimumWageCols[lineGraphY]}\n                x={lineGraphX}\n                y={lineGraphY}\n                focusable={false}\n                grouping=\"state\"\n                cords={\n                  selectedState !== 'all' &&\n                  lineGraphX === 'year' &&\n                  lineGraphY === 'effectiveMinWageTodayDollars'\n                    ? [\n                        {\n                          x: selectedYear,\n                          y:\n                            data.find(\n                              (wage) =>\n                                wage.year === selectedYear &&\n                                wage.state?.toLowerCase() ===\n                                  selectedState.toLowerCase()\n                            )?.effectiveMinWageTodayDollars ?? 0,\n                        },\n                      ]\n                    : undefined\n                }\n                filter={\n                  selectedState !== 'all'\n                    ? (row) => row.state === selectedState\n                    : undefined\n                }\n                opacity=\".4\"\n                strokeWidth={3}\n                stroke={selectedState !== 'all' ? 'blue' : undefined}\n                renderToolTip={(minWage) => (\n                  <Space direction=\"vertical\">\n                    <Text style={{ color: 'white' }}>\n                      State: {minWage?.state ?? ''}\n                    </Text>\n                  </Space>\n                )}\n              />\n            </Col>\n          </Row>\n          <Divider />\n          <Row style={{ width }} justify=\"space-around\">\n            <Col style={{ width: '45%' }}>\n              <YearSelector\n                defaultYear={selectedScatterPlotYear}\n                minYear={minScatterPlotYear}\n                maxYear={maxScatterPlotYear}\n                incrementYearDisabled={shouldDisableScatterPlotAutoIncrement}\n                toggleIncrementYear={setShouldDisableScatterPlotAutoIncrement}\n                onChange={setSelectedScatterPlotYear}\n              />\n            </Col>\n            <Col style={{ width: '45%' }}>\n              <Select\n                style={{ width: '100%' }}\n                value={selectedRent}\n                onChange={(val) => setSelectedRent(val)}\n              >\n                <Select.Option value=\"studioPercentOfRent\">\n                  Studio\n                </Select.Option>\n                <Select.Option value=\"oneBedroomPercentOfRent\">\n                  One Bedroom\n                </Select.Option>\n                <Select.Option value=\"twoBedroomPercentOfRent\">\n                  Two Bedroom\n                </Select.Option>\n                <Select.Option value=\"threeBedroomPercentOfRent\">\n                  Three Bedroom\n                </Select.Option>\n                <Select.Option value=\"fourBedroomPercentOfRent\">\n                  Four Bedroom\n                </Select.Option>\n              </Select>\n            </Col>\n          </Row>\n          <Row style={{ width }}>\n            <Col flex=\"1\">\n              <ScatterPlot<MinimumWage>\n                width={width}\n                height={400}\n                margin={{ top: 50, right: 30, bottom: 70, left: 0 }}\n                data={filteredData}\n                xLabel={xAxisLabel}\n                yLabel={yAxisLabel}\n                x={selectedRent}\n                y=\"stateMinWageTodayDollars\"\n                color=\"state\"\n                radius={12}\n                opacity=\"0.4\"\n                circleText={(state) => convertStateToAbbreviation(state)}\n                renderToolTip={(row, state) => (\n                  <Space direction=\"vertical\">\n                    <Text style={{ color: 'white' }}>State: {state}</Text>\n                    <Text style={{ color: 'white' }}>\n                      Rent Cost:{' '}\n                      {currencyFormatter.format(row?.twoBedroom ?? 0)}\n                    </Text>\n                    <Text style={{ color: 'white' }}>\n                      Effective Minimum Wage:{' '}\n                      {currencyFormatter.format(\n                        row?.effectiveMinWageTodayDollars ?? 0\n                      )}\n                    </Text>\n                  </Space>\n                )}\n              />\n            </Col>\n          </Row>\n        </>\n      )}\n    />\n  );\n};\n","import { USMap, WorldMap } from '../models/maps';\nimport { UseQueryOptions, useQuery } from 'react-query';\nimport { fetchUSMap, fetchWorldMap } from '../lib/maps';\n\nimport { DSVParsedArray } from 'd3-dsv';\nimport { MinimumWage, Rent } from '../models/minimumWage';\nimport { fetchMinimumWageCSV, fetchRentCSV } from '../lib/minimumWage';\n\nconst useMinimumWageQuery = (\n  options?: UseQueryOptions<DSVParsedArray<MinimumWage>, Error>\n) =>\n  useQuery<DSVParsedArray<MinimumWage>, Error>(\n    'minWage',\n    fetchMinimumWageCSV,\n    options\n  );\n\nconst useRentQuery = (options?: UseQueryOptions<DSVParsedArray<Rent>, Error>) =>\n  useQuery<DSVParsedArray<Rent>, Error>('rent', fetchRentCSV, options);\n\nconst useWorldMapQuery = (options?: UseQueryOptions<WorldMap, Error>) =>\n  useQuery<WorldMap, Error>('worldMap', fetchWorldMap, options);\n\nconst useUSMapQuery = (options?: UseQueryOptions<USMap, Error>) =>\n  useQuery<USMap, Error>('usMap', fetchUSMap, options);\n\nexport { useMinimumWageQuery, useWorldMapQuery, useUSMapQuery, useRentQuery };\n"],"sourceRoot":""}