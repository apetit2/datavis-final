{"version":3,"sources":["util/currency.ts","components/GeospatialChart/hooks/useGeospatialChart.tsx","components/GeospatialChart/ChartLegend.tsx","services/apis.ts","services/lib/maps.ts","util/inflation.ts","services/lib/minimumWage.ts","components/GeospatialChart/hooks/useFetchStateData.tsx","services/hooks/useQuery.tsx","components/GeospatialChart/GeospatialChart.tsx","components/GeospatialChart/hooks/usePanAndZoom.tsx","components/GeospatialChart/YearSelector.tsx","pages/MinimumWage/constants.ts","hooks/useResizeChart.tsx","layout/PageLayout.tsx","hooks/useFallback.tsx","hooks/useIncrementYear.tsx","components/LineChart/AxisBottom.tsx","components/LineChart/AxisLeft.tsx","components/AnimatedGroup/AnimatedGroup.tsx","components/LineChart/LineChart.tsx","components/ScatterPlot/AxisBottom.tsx","components/LineChart/LineChartAxes.tsx","components/ScatterPlot/AxisLeft.tsx","components/ScatterPlot/ScatterPlot.tsx","util/convertStateToAbbreviation.ts","components/ScatterPlot/ScatterPlotAxes.tsx","pages/MinimumWage/FinalVisPage.tsx"],"names":["currencyFormatter","Intl","NumberFormat","style","currency","useGeospatialChart","rows","timeField","stateField","colorRepresentation","chosenTimeFieldValue","filteredRows","filter","row","Number","colorSaturationScale","scaleSequential","domain","extent","interpolator","interpolateBlues","states","reduce","acc","current","push","state","toString","value","color","colorExtent","curr","max","min","findFieldByStateOrDefault","field","defaultValue","find","el","Text","Typography","ChartLegend","chosenTimeField","colors","accumulator","length","width","cols","map","span","height","backgroundColor","justify","format","BASE_URL","API","MinimumWageCSV","RentCSV","WorldMap","USMap","fetchUSMap","a","fetch","json","usMap","accountForInflation","fromCPI","dollars","parseMinimumCsv","year","Year","State","stateMinWage","stateMinWageTodayDollars","federalMinWage","federalMinWageTodayDollars","effectiveMinWage","effectiveMinWageTodayDollars","cpiAverage","depLaborUncleanData","depLaborCleanedLowValue","depLaborCleanedLowValueTodayDollars","depLaborCleanedHighValue","depLaborCleanedHighValueTodayDollars","footnote","Footnote","rowType","parseRentCsv","studio","oneBedroom","twoBedroom","threeBedroom","fourBedroom","population","Population","merge","rents","minWages","minWage","rent","fetchMinimumWageCSV","csv","useFetchStateData","options","fallback","useQuery","data","isError","isLoading","Loading","GeospatialChart","showLegend","onMouseOver","onClick","renderToolTip","useState","clicked","setClicked","ref","setRef","useEffect","ReactTooltip","rebuild","svgZoom","zoom","on","event","select","attr","transform","scaleExtent","translateExtent","call","usePanAndZoom","usData","projection","geoAlbersUsa","translate","scale","path","geoPath","features","feature","objects","id","properties","name","className","d","stroke","strokeWidth","undefined","fill","getContent","fieldValue","YearSelector","defaultYear","minYear","maxYear","incrementYearDisabled","onChange","toggleIncrementYear","direction","justifyContent","strong","size","val","checked","Constants","initialDimensions","marginTop","marginRight","marginBottom","marginLeft","useResizeChart","useRef","setWidth","setHeight","resizeObserver","ResizeObserver","entries","Array","isArray","entry","contentRect","element","observe","unobserve","newChartDimensions","dimensions","parsedDimensions","boundedHeight","Math","boundedWidth","combineChartDimensions","PageLayout","pageTitle","menuItems","description","generateChart","showDescriptionTitle","gutter","flex","textAlign","fontSize","useIncrementYear","shouldIncrement","currentSelectedYear","setYear","interval","setInterval","clearInterval","AxisBottom","xScale","tickOffset","ticks","tick","y2","dy","textAnchor","y","AxisLeft","yScale","x2","x","AnimatedGroup","forwardRef","children","rest","opacity","useSpring","from","delay","g","filterData","grouping","brushExtent","lines","rowIndex","sort","rowOne","rowTwo","localeCompare","forEach","index","arr","LineChart","margin","xLabel","yLabel","focusable","cords","setBrushExtent","brushRef","xValue","useCallback","yValue","colorValue","brushedSectionHeight","useMemo","yRange","xRange","focusXRange","paddedHeight","top","bottom","paddedWidth","left","right","scaleLinear","range","nice","focusXScale","focusYScale","colorScale","uniqueOrdinalValues","Set","numUniqueOrdinalValues","_","interpolateTurbo","scaleOrdinal","marginsForAxes","yAxisLabelOffset","drawLines","line","curve","curveBasis","drawFocus","brush","brushX","selection","invert","focusLines","toDrawLine","cordX","cordY","cx","cy","r","Select","Option","isDollarValue","x1","y1","reversed","slice","reverse","ScatterPlot","radius","isXAxisDollarValue","isYAxisDollarValue","circleText","colorRange","yAxisLabel","cursor","place","effect","xAndY","tmp","findFieldByValue","StateAbbreviation","alabama","alaska","arizona","arkansas","california","colorado","connecticut","delaware","florida","georgia","hawaii","idaho","illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland","massachusetts","michigan","minnesota","mississippi","missouri","montana","nebraska","nevada","ohio","oklahoma","oregon","pennsylvania","tennessee","texas","utah","vermont","virginia","washington","wisconsin","wyoming","guam","micronesia","palau","FinalVisPage","minScatterPlotYear","shouldDisableAutoIncrement","setShouldDisableAutoIncrementYear","shouldDisableScatterPlotAutoIncrement","setShouldDisableScatterPlotAutoIncrement","selectedYear","setSelectedYear","selectedScatterPlotYear","setSelectedScatterPlotYear","selectedState","setSelectedState","filteredData","useFallback","to","pathname","target","display","wage","toLowerCase","lowercase","convertStateToAbbreviation"],"mappings":"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","file":"static/js/4.bb24d888.chunk.js","sourcesContent":["export const currencyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n","import { DSVParsedArray, extent, interpolateBlues, scaleSequential } from 'd3';\n\nimport { CSVRow } from '../../../services/models/shared';\n\nexport const useGeospatialChart = (\n  rows: DSVParsedArray<CSVRow>,\n  timeField: string,\n  stateField: string,\n  colorRepresentation: string,\n  chosenTimeFieldValue: number\n) => {\n  // filter the rows by some time value (preferably year)\n  const filteredRows = rows.filter(\n    (row) => Number(row[timeField]) === chosenTimeFieldValue\n  );\n\n  // color saturation scale\n  const colorSaturationScale = scaleSequential()\n    .domain(\n      extent(filteredRows, (row) => {\n        return Number(row[colorRepresentation]);\n      }) as [number, number]\n    )\n    .interpolator(interpolateBlues);\n\n  // create an array of states with some representation of some value\n  const states = filteredRows.reduce((acc, current) => {\n    acc.push({\n      state: current[stateField]?.toString() ?? '',\n      value: Number(current[colorRepresentation]),\n      color: colorSaturationScale(Number(current[colorRepresentation])),\n    });\n    return acc;\n  }, [] as { state: string; value: number; color: string }[]);\n\n  // create max and min for color values\n  const colorExtent = states.reduce(\n    (acc: null | { max: number; min: number }, curr) => {\n      if (!acc) {\n        return { max: curr.value, min: curr.value };\n      }\n\n      if (curr.value > acc.max) {\n        return { max: curr.value, min: acc.min };\n      }\n\n      if (curr.value < acc.min) {\n        return { max: acc.min, min: curr.value };\n      }\n\n      return acc;\n    },\n    null\n  );\n\n  const findFieldByStateOrDefault = <T extends string | number>(\n    state: string,\n    field: 'value' | 'color',\n    defaultValue: T\n  ): T => {\n    return (\n      (states.find((el) => el.state === state)?.[field] as T) ?? defaultValue\n    );\n  };\n\n  return {\n    colorSaturationScale,\n    filteredRows,\n    states,\n    colorExtent,\n    findFieldByStateOrDefault,\n  };\n};\n","import { Col, Row, Typography } from 'antd';\n\nimport { CSVRow } from '../../services/models/shared';\nimport { DSVParsedArray } from 'd3';\nimport { KeysMatching } from '../../types/shared';\nimport { currencyFormatter } from '../../util/currency';\nimport { useGeospatialChart } from './hooks/useGeospatialChart';\n\nconst { Text } = Typography;\n\nexport interface ChartLegendProps<T extends CSVRow> {\n  timeField: KeysMatching<T, number | undefined>;\n  stateField: KeysMatching<T, string | undefined>;\n  colorRepresentation: KeysMatching<T, number | undefined>;\n  chosenTimeField: number;\n  rows: DSVParsedArray<CSVRow>;\n}\n\nexport const ChartLegend = <T extends CSVRow>({\n  timeField,\n  stateField,\n  colorRepresentation,\n  chosenTimeField,\n  rows,\n}: ChartLegendProps<T>) => {\n  const { colorExtent, colorSaturationScale } = useGeospatialChart(\n    rows,\n    timeField as string,\n    stateField as string,\n    colorRepresentation as string,\n    chosenTimeField\n  );\n\n  const colors: string[] = [];\n  const max = colorExtent?.max || 0;\n  let min = colorExtent?.min || 0;\n\n  const accumulator = (max - min) / 8;\n\n  while (colors.length < 8) {\n    colors.push(colorSaturationScale(min));\n    min += accumulator;\n  }\n\n  // the 200 is some arbitrary number\n  const width = 200 / colors.length;\n  const cols = colors.map((color) => (\n    <Col\n      span={3}\n      style={{ height: '25px', width, backgroundColor: color }}\n      key={color}\n    />\n  ));\n\n  return (\n    <>\n      <Row justify=\"end\">{cols}</Row>\n      <Row justify=\"space-between\">\n        <Text>{currencyFormatter.format(colorExtent?.min ?? 0)}</Text>\n        <Text>{currencyFormatter.format(max)}</Text>\n      </Row>\n    </>\n  );\n};\n","const BASE_URL = 'https://gist.githubusercontent.com/apetit2/';\n\nexport const API = {\n  MinimumWageCSV: `${BASE_URL}212a7cd715f8ba34eb637d014fffb12f/raw/0cc5e300ed1747be91ec391f4546e1a44c90d810/minimum-wage-data.csv`,\n  RentCSV: `${BASE_URL}aaa39169ab48ff313cfb2bfe12486fef/raw/6d5308a46301f7f2b08c6974a3be7e7e138434f8/rent.csv`,\n  WorldMap: 'https://unpkg.com/world-atlas@1.1.4/world/110m.json',\n  USMap: 'https://unpkg.com/us-atlas@3.0.0/states-10m.json',\n};\n","import { USMap, WorldMap } from '../models/maps';\n\nimport { API } from '../apis';\n\nexport const fetchWorldMap = async () => {\n  const worldMap = (await (await fetch(API.WorldMap)).json()) as WorldMap;\n  return worldMap;\n};\n\nexport const fetchUSMap = async () => {\n  const usMap = (await (await fetch(API.USMap)).json()) as USMap;\n  return usMap;\n};\n","const CPI_TODAY = 260.28;\n\nexport const accountForInflation = (fromCPI: number, dollars: number) => {\n  return (dollars * fromCPI) / CPI_TODAY;\n};\n","import { DSVRowString, csv, DSVParsedArray } from 'd3';\nimport { accountForInflation } from '../../util/inflation';\n\nimport { API } from '../apis';\nimport { MinimumWage, Rent } from '../models/minimumWage';\n\nconst parseMinimumCsv: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => MinimumWage = (row) => {\n  return {\n    year: Number(row.Year),\n    state: row.State,\n    stateMinWage: Number(row['State.Minimum.Wage']),\n    stateMinWageTodayDollars: Number(row['State.Minimum.Wage.2020.Dollars']),\n    federalMinWage: Number(row['Federal.Minimum.Wage']),\n    federalMinWageTodayDollars: Number(\n      row['Federal.Minimum.Wage.2020.Dollars']\n    ),\n    effectiveMinWage: Number(row['Effective.Minimum.Wage']),\n    effectiveMinWageTodayDollars: Number(\n      row['Effective.Minimum.Wage.2020.Dollars']\n    ),\n    cpiAverage: Number(row['CPI.Average']),\n    depLaborUncleanData: row['Department.Of.Labor.Uncleaned.Data'],\n    depLaborCleanedLowValue: Number(\n      row['Department.Of.Labor.Cleaned.Low.Value']\n    ),\n    depLaborCleanedLowValueTodayDollars: Number(\n      row['Department.Of.Labor.Cleaned.Low.Value.2020.Dollars']\n    ),\n    depLaborCleanedHighValue: Number(\n      row['Department.Of.Labor.Cleaned.High.Value']\n    ),\n    depLaborCleanedHighValueTodayDollars: Number(\n      row['Department.Of.Labor.Cleaned.High.Value.2020.Dollars']\n    ),\n    footnote: row.Footnote,\n    rowType: 'MinWage',\n  };\n};\n\nconst parseRentCsv: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Rent = (row) => {\n  return {\n    state: row.State,\n    year: Number(row.Year),\n    studio: Number(row['Rent 0 BR']),\n    oneBedroom: Number(row['Rent 1 BR']),\n    twoBedroom: Number(row['Rent 2 BR']),\n    threeBedroom: Number(row['Rent 3 BR']),\n    fourBedroom: Number(row['Rent 4 BR']),\n    population: Number(row.Population),\n    rowType: 'Rent',\n  };\n};\n\nconst merge = (\n  rents: DSVParsedArray<Rent>,\n  minWages: DSVParsedArray<MinimumWage>\n) => {\n  const res = minWages.map((minWage) => {\n    const rent = rents.find(\n      (row) => row.year === minWage.year && row.state === minWage.state\n    );\n\n    if (!rent) {\n      return minWage;\n    }\n\n    return {\n      ...minWage,\n      studio: accountForInflation(minWage.cpiAverage!, rent.studio!),\n      oneBedroom: accountForInflation(minWage.cpiAverage!, rent.oneBedroom!),\n      twoBedroom: accountForInflation(minWage.cpiAverage!, rent.twoBedroom!),\n      threeBedroom: accountForInflation(\n        minWage.cpiAverage!,\n        rent.threeBedroom!\n      ),\n      fourBedroom: accountForInflation(minWage.cpiAverage!, rent.fourBedroom!),\n      population: rent.population,\n    } as MinimumWage;\n  });\n\n  return res as DSVParsedArray<MinimumWage>;\n};\n\nexport const fetchMinimumWageCSV = async () => {\n  const minWages = await csv(API.MinimumWageCSV, parseMinimumCsv);\n  const rents = await csv(API.RentCSV, parseRentCsv);\n\n  return merge(rents, minWages);\n};\n\nexport const fetchRentCSV = async () => {\n  const res = await csv(API.RentCSV, parseRentCsv);\n  return res;\n};\n","import { Loading } from '../../Loading/Loading';\nimport { Map } from '../../../services/models/maps';\nimport { ReactElement } from 'react';\nimport { Typography } from 'antd';\nimport { useUSMapQuery } from '../../../services/hooks/useQuery';\n\nconst { Text } = Typography;\n\nexport const useFetchStateData: () => {\n  data: Map;\n  fallback: ReactElement | undefined;\n} = () => {\n  const { data, isError, isLoading } = useUSMapQuery();\n\n  let fallback: ReactElement | undefined;\n  if (isLoading) {\n    fallback = <Loading />;\n  }\n\n  if (isError || !data) {\n    fallback = <Text>Some error</Text>;\n  }\n\n  return {\n    data: data!,\n    fallback,\n  };\n};\n","import { USMap, WorldMap } from '../models/maps';\nimport { UseQueryOptions, useQuery } from 'react-query';\nimport { fetchUSMap, fetchWorldMap } from '../lib/maps';\n\nimport { DSVParsedArray } from 'd3-dsv';\nimport { MinimumWage, Rent } from '../models/minimumWage';\nimport { fetchMinimumWageCSV, fetchRentCSV } from '../lib/minimumWage';\n\nconst useMinimumWageQuery = (\n  options?: UseQueryOptions<DSVParsedArray<MinimumWage>, Error>\n) =>\n  useQuery<DSVParsedArray<MinimumWage>, Error>(\n    'minWage',\n    fetchMinimumWageCSV,\n    options\n  );\n\nconst useRentQuery = (options?: UseQueryOptions<DSVParsedArray<Rent>, Error>) =>\n  useQuery<DSVParsedArray<Rent>, Error>('rent', fetchRentCSV, options);\n\nconst useWorldMapQuery = (options?: UseQueryOptions<WorldMap, Error>) =>\n  useQuery<WorldMap, Error>('worldMap', fetchWorldMap, options);\n\nconst useUSMapQuery = (options?: UseQueryOptions<USMap, Error>) =>\n  useQuery<USMap, Error>('usMap', fetchUSMap, options);\n\nexport { useMinimumWageQuery, useWorldMapQuery, useUSMapQuery, useRentQuery };\n","import './GeospatialChart.css';\n\nimport { DSVParsedArray, geoAlbersUsa, geoPath } from 'd3';\nimport { MouseEvent, useEffect, useState, ReactElement } from 'react';\n\nimport { ChartLegend } from './ChartLegend';\nimport { CSVRow } from '../../services/models/shared';\nimport { KeysMatching } from '../../types/shared';\nimport ReactTooltip from 'react-tooltip';\nimport { USMap } from '../../services/models/maps';\nimport { feature } from 'topojson-client';\nimport { useFetchStateData } from './hooks/useFetchStateData';\nimport { useGeospatialChart } from './hooks/useGeospatialChart';\nimport { usePanAndZoom } from './hooks/usePanAndZoom';\nimport { Col, Row } from 'antd';\n\nexport interface GeospatialChartProps<T extends CSVRow> {\n  width: number;\n  height: number;\n  rows: DSVParsedArray<CSVRow>;\n  timeField: KeysMatching<T, number | undefined>;\n  stateField: KeysMatching<T, string | undefined>;\n  colorRepresentation: KeysMatching<T, number | undefined>;\n  chosenTimeField: number;\n  showLegend?: boolean;\n  onMouseOver?: (event: MouseEvent<SVGPathElement>, state: string) => void;\n  onClick?: (event: MouseEvent<SVGPathElement>, state: string) => void;\n  renderToolTip?: (state: string, fieldValue: number) => ReactElement;\n}\n\nexport const GeospatialChart = <T extends CSVRow>({\n  width,\n  height,\n  rows,\n  timeField,\n  stateField,\n  colorRepresentation,\n  chosenTimeField,\n  showLegend = false,\n  onMouseOver,\n  onClick,\n  renderToolTip,\n}: GeospatialChartProps<T>) => {\n  const [clicked, setClicked] = useState<string>();\n  const [ref, setRef] = useState<SVGSVGElement | null>(null);\n  const { data, fallback } = useFetchStateData();\n\n  useEffect(() => {\n    ReactTooltip.rebuild();\n  }, []);\n\n  usePanAndZoom(ref, height, width);\n  const { findFieldByStateOrDefault } = useGeospatialChart(\n    rows,\n    timeField as string,\n    stateField as string,\n    colorRepresentation as string,\n    chosenTimeField\n  );\n\n  if (fallback) {\n    return fallback;\n  }\n\n  const generateScale = () => {\n    if (width / 1.3 > 800) {\n      return 800;\n    }\n\n    return width / 1.3;\n  };\n\n  const usData = data as USMap;\n  const projection = geoAlbersUsa()\n    .translate([width / 2, height / 2])\n    .scale(generateScale());\n  const path = geoPath().projection(projection);\n  const { features } = feature(usData, usData.objects.states);\n\n  return (\n    <>\n      <svg height={height} width={width} ref={setRef}>\n        <g id=\"states\">\n          {features.map((value) => (\n            <path\n              data-event=\"mouseover\"\n              data-event-off=\"mouseout\"\n              data-tip={value.properties.name}\n              data-for=\"states-tooltip\"\n              className={\n                clicked === value.properties.name ? 'state clicked' : 'state'\n              }\n              d={path(value) as string}\n              stroke=\"black\"\n              strokeWidth={0.5}\n              key={`${value.properties.name}`}\n              onClick={(event) => {\n                if (onClick) {\n                  setClicked(value.properties.name);\n                  onClick(event, value.properties.name);\n                }\n              }}\n              onMouseOver={\n                onMouseOver\n                  ? (event) => onMouseOver(event, value.properties.name)\n                  : undefined\n              }\n              fill={findFieldByStateOrDefault<string>(\n                value.properties.name,\n                'color',\n                'green'\n              )}\n            />\n          ))}\n        </g>\n      </svg>\n      {renderToolTip && (\n        <ReactTooltip\n          id=\"states-tooltip\"\n          getContent={(state) => {\n            const fieldValue = findFieldByStateOrDefault<number>(\n              state,\n              'value',\n              0\n            );\n            return renderToolTip(state, fieldValue);\n          }}\n        />\n      )}\n      {showLegend && (\n        <Row style={{ width }} justify=\"center\">\n          <Col>\n            <ChartLegend<T>\n              timeField={timeField}\n              stateField={stateField}\n              colorRepresentation={colorRepresentation}\n              chosenTimeField={chosenTimeField}\n              rows={rows}\n            />\n          </Col>\n        </Row>\n      )}\n    </>\n  );\n};\n","import { select, zoom } from 'd3';\n\nimport { useEffect } from 'react';\n\nexport const usePanAndZoom = (\n  ref: SVGSVGElement | null,\n  height: number,\n  width: number\n) => {\n  useEffect(() => {\n    if (ref) {\n      const svgZoom = zoom<SVGSVGElement, unknown>();\n\n      svgZoom.on('zoom', (event) =>\n        select('#states').attr('transform', event.transform)\n      );\n      svgZoom.scaleExtent([1, 8]);\n      svgZoom.translateExtent([\n        [0, height - 400],\n        [width, height],\n      ]);\n\n      select(ref).call(svgZoom);\n    }\n  }, [ref, height, width]);\n};\n","import { Slider, Space, Switch, Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport interface YearSelectorProps {\n  defaultYear: number;\n  minYear: number;\n  maxYear: number;\n  incrementYearDisabled: boolean;\n  onChange: (year: number) => void;\n  toggleIncrementYear: (disable: boolean) => void;\n}\n\nexport const YearSelector: React.FC<YearSelectorProps> = ({\n  defaultYear,\n  minYear,\n  maxYear,\n  incrementYearDisabled,\n  onChange,\n  toggleIncrementYear,\n}) => {\n  return (\n    <Space style={{ width: '100%' }} direction=\"vertical\">\n      <Space\n        direction=\"horizontal\"\n        style={{ justifyContent: 'space-between', width: '100%' }}\n      >\n        <Text strong>\n          Select a Year: <Text style={{ color: 'green' }}>{defaultYear}</Text>\n        </Text>\n        <Space direction=\"horizontal\" size=\"small\">\n          <Switch\n            onChange={(val) => toggleIncrementYear(!val)}\n            checked={!incrementYearDisabled}\n          />\n          <Text strong>\n            {incrementYearDisabled ? 'Enable' : 'Disable'} Auto Increment\n          </Text>\n        </Space>\n      </Space>\n      <Slider\n        min={minYear}\n        max={maxYear}\n        value={defaultYear}\n        onChange={onChange}\n      />\n    </Space>\n  );\n};\n","export const Constants = {\n  minWageUrl:\n    'https://gist.github.com/apetit2/212a7cd715f8ba34eb637d014fffb12f',\n  rentUrl: 'https://gist.github.com/apetit2/aaa39169ab48ff313cfb2bfe12486fef',\n} as const;\n","// adapted from https://wattenberger.com/blog/react-and-d3\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Dimensions {\n  height: number;\n  width: number;\n  marginTop: number;\n  marginRight: number;\n  marginBottom: number;\n  marginLeft: number;\n}\n\ninterface CombinedDimensions extends Dimensions {\n  boundedHeight: number;\n  boundedWidth: number;\n}\n\nconst initialDimensions = {\n  height: 400,\n  width: 0,\n  marginTop: 10,\n  marginRight: 10,\n  marginBottom: 40,\n  marginLeft: 75,\n};\n\nconst combineChartDimensions: (dimensions: Dimensions) => CombinedDimensions = (\n  dimensions\n) => {\n  const parsedDimensions = {\n    ...dimensions,\n    marginTop: dimensions.marginTop || 10,\n    marginRight: dimensions.marginRight || 10,\n    marginBottom: dimensions.marginBottom || 40,\n    marginLeft: dimensions.marginLeft || 75,\n  } as Dimensions;\n\n  return {\n    ...parsedDimensions,\n    boundedHeight: Math.max(\n      parsedDimensions.height -\n        parsedDimensions.marginTop -\n        parsedDimensions.marginBottom,\n      0\n    ),\n    boundedWidth: Math.max(\n      parsedDimensions.width -\n        parsedDimensions.marginLeft -\n        parsedDimensions.marginRight,\n      0\n    ),\n  };\n};\n\nexport const useResizeChart = () => {\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  const [width, setWidth] = useState(initialDimensions.width);\n  const [height, setHeight] = useState(initialDimensions.height);\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver((entries) => {\n      if (!Array.isArray(entries) || !entries.length) {\n        return;\n      }\n\n      const entry = entries[0];\n      if (width !== entry.contentRect.width) {\n        setWidth(entry.contentRect.width);\n      }\n\n      if (height !== entry.contentRect.height) {\n        setHeight(entry.contentRect.height);\n      }\n    });\n\n    if (ref.current) {\n      const element = ref.current;\n      resizeObserver.observe(element);\n\n      return () => resizeObserver.unobserve(element);\n    }\n\n    return () => null;\n  }, [height, width]);\n\n  const newChartDimensions = combineChartDimensions({\n    ...initialDimensions,\n    width,\n    height,\n  });\n\n  return { ref, dimensions: newChartDimensions };\n};\n","import { Col, Row, Space, Typography } from 'antd';\n\nimport { ReactElement } from 'react';\nimport { useResizeChart } from '../hooks/useResizeChart';\n\nconst { Text } = Typography;\n\nexport interface PageLayoutProps {\n  pageTitle: string;\n  generateChart: (dimensions: {\n    width: number;\n    height: number;\n  }) => ReactElement;\n  description?: ReactElement;\n  menuItems?: ReactElement;\n  showDescriptionTitle?: boolean;\n}\n\nexport const PageLayout: React.FC<PageLayoutProps> = ({\n  pageTitle,\n  menuItems,\n  description,\n  generateChart,\n  showDescriptionTitle = true,\n}) => {\n  const { ref, dimensions } = useResizeChart();\n\n  return (\n    <div style={{ width: '100%' }} ref={ref}>\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <Row\n          style={{ width: '100%' }}\n          justify={menuItems ? 'space-between' : 'center'}\n          gutter={[0, 24]}\n        >\n          <Col flex={1} style={{ textAlign: 'center' }}>\n            <Text strong style={{ fontSize: 32 }}>\n              {pageTitle}\n            </Text>\n          </Col>\n          {menuItems && <Col flex={1}>{menuItems}</Col>}\n        </Row>\n        {generateChart(dimensions)}\n        <Space direction=\"vertical\">\n          {showDescriptionTitle && (\n            <Text strong style={{ fontSize: 24 }}>\n              Description\n            </Text>\n          )}\n          <Text style={{ fontSize: 14 }}>{description}</Text>\n        </Space>\n      </Space>\n    </div>\n  );\n};\n","import { CSVRow } from '../services/models/shared';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { Loading } from '../components/Loading/Loading';\nimport { Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport const useFallback = <T extends CSVRow>(\n  isLoading: boolean,\n  isError: boolean,\n  data?: DSVParsedArray<T>\n) => {\n  let fallback = null;\n\n  if (isError) {\n    fallback = (\n      <Text strong style={{ color: 'red' }}>\n        Failed To Load Dataset.\n      </Text>\n    );\n  }\n\n  if (isLoading) {\n    fallback = <Loading />;\n  }\n\n  if (!data && !isLoading) {\n    fallback = <Text strong>No Data Found.</Text>;\n  }\n\n  return { fallback };\n};\n","import { useEffect } from 'react';\n\nexport const useIncrementYear = (\n  maxYear: number,\n  minYear: number,\n  shouldIncrement: boolean,\n  currentSelectedYear: number,\n  setYear: (year: number) => void\n) => {\n  useEffect(() => {\n    if (!shouldIncrement) {\n      return;\n    }\n\n    const interval = setInterval(() => {\n      if (currentSelectedYear === maxYear) {\n        setYear(minYear);\n      } else {\n        setYear(currentSelectedYear + 1);\n      }\n    }, 500);\n\n    // eslint-disable-next-line consistent-return\n    return () => clearInterval(interval);\n  }, [currentSelectedYear, shouldIncrement, setYear, maxYear, minYear]);\n};\n","import { ScaleLinear } from 'd3';\n\nexport interface AxisBottom {\n  xScale: ScaleLinear<number, number, never>;\n  height: number;\n  tickOffset?: number;\n}\n\nexport const AxisBottom: React.FC<AxisBottom> = ({\n  xScale,\n  height,\n  tickOffset = 3,\n}) => {\n  return (\n    <>\n      {xScale.ticks().map((tick) => (\n        <g\n          style={{ stroke: '#C0C0BB' }}\n          key={tick}\n          transform={`translate(${xScale(tick)}, 0)`}\n        >\n          <line y2={height} />\n          <text dy=\".71em\" textAnchor=\"middle\" y={height + tickOffset}>\n            {tick}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n","import { ScaleLinear } from 'd3';\n\nexport interface AxisLeftProps {\n  yScale: ScaleLinear<number, number, never>;\n  width: number;\n  tickOffset?: number;\n}\n\nexport const AxisLeft: React.FC<AxisLeftProps> = ({\n  yScale,\n  width,\n  tickOffset = 3,\n}) => (\n  <>\n    {yScale.ticks().map((tick) => (\n      <g\n        key={tick}\n        style={{ stroke: '#C0C0BB' }}\n        transform={`translate(0,${yScale(tick)})`}\n      >\n        <line x2={width} />\n        <text textAnchor=\"end\" x={-tickOffset} dy=\".32em\">\n          {tick}\n        </text>\n      </g>\n    ))}\n  </>\n);\n","import { forwardRef } from 'react';\nimport { animated, useSpring } from 'react-spring';\n\nexport interface AnimatedGroupProps extends React.HTMLAttributes<SVGGElement> {\n  transform?: string;\n}\n\nexport const AnimatedGroup = forwardRef<SVGGElement, AnimatedGroupProps>(\n  ({ children, ...rest }, ref) => {\n    const { opacity } = useSpring({\n      opacity: 1,\n      from: { opacity: 0 },\n      delay: 300,\n    });\n\n    return (\n      <animated.g ref={ref} {...rest} opacity={opacity}>\n        {children}\n      </animated.g>\n    );\n  }\n);\n","/* eslint-disable react/no-array-index-key */\nimport {\n  DSVParsedArray,\n  extent,\n  interpolateTurbo,\n  scaleLinear,\n  scaleOrdinal,\n  line,\n  curveBasis,\n  brushX,\n  select,\n} from 'd3';\nimport {\n  PropsWithChildren,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { AxisBottom } from './AxisBottom';\nimport { AxisLeft } from './AxisLeft';\nimport { CSVRow } from '../../services/models/shared';\nimport { KeysMatching } from '../../types/shared';\nimport { AnimatedGroup } from '../AnimatedGroup';\n\nexport interface LineChartProps<T extends CSVRow> {\n  filter?: (row: T) => boolean;\n  grouping: KeysMatching<T, string | undefined>;\n  width: number;\n  height: number;\n  margin: { top: number; right: number; bottom: number; left: number };\n  x: KeysMatching<T, number | undefined>;\n  y: KeysMatching<T, number | undefined>;\n  xLabel: string;\n  yLabel: string;\n  opacity?: string;\n  data: DSVParsedArray<T>;\n  strokeWidth?: number;\n  stroke?: string;\n  focusable?: boolean;\n  cords?: { x: number; y: number }[];\n}\n\nconst xAxisLabelOffset = 50;\nconst brushedSectionSize = 0.2;\n\nconst filterData = <T extends CSVRow>(\n  data: DSVParsedArray<T>,\n  grouping: KeysMatching<T, string | undefined>,\n  filter?: (row: T) => boolean,\n  brushExtent?: [number, number],\n  x?: KeysMatching<T, number | undefined>\n) => {\n  const lines: T[][] = [];\n  let rowIndex = 0;\n  // no great way to make this efficient\n  data\n    .filter((row) => {\n      if (brushExtent && x) {\n        return (\n          (filter === undefined || filter(row)) &&\n          (row[x] as number) >= brushExtent[0] &&\n          (row[x] as number) <= brushExtent[1]\n        );\n      }\n\n      return filter === undefined || filter(row);\n    })\n    .sort((rowOne, rowTwo) => {\n      return (rowOne[grouping] as string).localeCompare(\n        rowTwo[grouping] as string\n      );\n    })\n    .forEach((row, index, arr) => {\n      if (\n        index >= 1 &&\n        (row[grouping] as string) !== (arr[index - 1][grouping] as string)\n      ) {\n        lines.push([row]);\n        rowIndex += 1;\n      } else if (index === 0) {\n        lines.push([row]);\n      } else {\n        lines[rowIndex].push(row);\n      }\n    });\n\n  return lines;\n};\n\nexport const LineChart = <T extends CSVRow>({\n  filter,\n  grouping,\n  width,\n  height = 400,\n  margin,\n  x,\n  y,\n  xLabel,\n  yLabel,\n  data,\n  opacity = '.3',\n  strokeWidth = 3,\n  stroke,\n  focusable = true,\n  cords,\n}: PropsWithChildren<LineChartProps<T>>) => {\n  const [brushExtent, setBrushExtent] = useState<[number, number]>();\n  const brushRef = useRef<SVGGElement>(null);\n\n  const xValue = useCallback((row: T) => row[x] as number, [x]);\n  const yValue = useCallback((row: T) => row[y] as number, [y]);\n  const colorValue = useCallback(\n    (row: T) => row[grouping] as string,\n    [grouping]\n  );\n\n  const brushedSectionHeight = useMemo(\n    () => brushedSectionSize * height,\n    [height]\n  );\n\n  const yRange = useMemo(\n    () => extent(data, yValue) as [number, number],\n    [data, yValue]\n  );\n  const xRange = useMemo(\n    () => extent(data, xValue) as [number, number],\n    [data, xValue]\n  );\n  const focusXRange = useMemo(\n    () => extent(data, xValue) as [number, number],\n    [data, xValue]\n  );\n\n  const paddedHeight = useMemo(\n    () => height - margin.top - margin.bottom,\n    [height, margin]\n  );\n  const paddedWidth = useMemo(\n    () => width - margin.left - margin.right,\n    [width, margin]\n  );\n\n  const xScale = useMemo(\n    () =>\n      scaleLinear()\n        .domain(brushExtent || xRange)\n        .range([0, paddedWidth])\n        .nice(),\n    [paddedWidth, xRange, brushExtent]\n  );\n  const yScale = useMemo(\n    () => scaleLinear().domain(yRange).range([paddedHeight, 0]),\n    [paddedHeight, yRange]\n  );\n  const focusXScale = useMemo(\n    () => scaleLinear().domain(focusXRange).range([0, paddedWidth]).nice(),\n    [paddedWidth, focusXRange]\n  );\n  const focusYScale = useMemo(\n    () =>\n      scaleLinear()\n        .domain(yRange)\n        .range([height * brushedSectionSize, 0]),\n    [yRange, height]\n  );\n\n  const colorScale = useMemo(() => {\n    const uniqueOrdinalValues = Array.from(new Set(data.map(colorValue)));\n    const numUniqueOrdinalValues = uniqueOrdinalValues.length;\n\n    const colors = uniqueOrdinalValues.map((_, index) => {\n      return interpolateTurbo(index / numUniqueOrdinalValues);\n    });\n    return scaleOrdinal<string>().domain(data.map(colorValue)).range(colors);\n  }, [data, colorValue]);\n\n  const marginsForAxes = useMemo(\n    () => ({\n      ...margin,\n      left: yRange[1].toString().length * 8.75 + 20,\n    }),\n    [margin, yRange]\n  );\n\n  const yAxisLabelOffset = useMemo(\n    () => yRange[1].toString().length * 8.75 + 10,\n    [yRange]\n  );\n\n  const drawLines = useMemo(() => {\n    return line<T>()\n      .x((row) => xScale(xValue(row)))\n      .y((row) => yScale(yValue(row)))\n      .curve(curveBasis);\n  }, [xScale, yScale, yValue, xValue]);\n\n  const drawFocus = useMemo(() => {\n    return line<T>()\n      .x((row) => focusXScale(xValue(row)))\n      .y((row) => focusYScale(yValue(row)))\n      .curve(curveBasis);\n  }, [focusXScale, focusYScale, yValue, xValue]);\n\n  useEffect(() => {\n    if (brushRef.current && paddedWidth > 0) {\n      const brush = brushX().extent([\n        [0, 0],\n        [paddedWidth, brushedSectionHeight],\n      ]);\n      brush(select<SVGGElement, unknown>(brushRef.current));\n      brush.on('brush end', (event) => {\n        setBrushExtent(\n          event.selection && event.selection.map(focusXScale.invert)\n        );\n      });\n    }\n  }, [paddedWidth, brushedSectionHeight, brushRef, focusXScale]);\n\n  const lines = useMemo(\n    () => filterData(data, grouping, filter, brushExtent, x),\n    [data, grouping, filter, brushExtent, x]\n  );\n\n  const focusLines = useMemo(() => {\n    if (focusable) {\n      return filterData(data, grouping, filter);\n    }\n    return undefined;\n  }, [data, grouping, filter, focusable]);\n\n  return (\n    <svg\n      width={width}\n      height={focusable ? height + height * brushedSectionSize + 50 : height}\n    >\n      <g transform={`translate(${marginsForAxes.left},${marginsForAxes.top})`}>\n        <AxisBottom xScale={xScale} height={paddedHeight} tickOffset={10} />\n\n        <text\n          className=\"axis-label\"\n          textAnchor=\"middle\"\n          transform={`translate(${-yAxisLabelOffset},${\n            paddedHeight / 2\n          }) rotate(-90)`}\n        >\n          {yLabel}\n        </text>\n\n        <AxisLeft yScale={yScale} width={paddedWidth} tickOffset={5} />\n\n        {!focusable && (\n          <text\n            className=\"axis-label\"\n            x={paddedWidth / 2}\n            y={paddedHeight + xAxisLabelOffset}\n            textAnchor=\"middle\"\n          >\n            {xLabel}\n          </text>\n        )}\n\n        <AnimatedGroup>\n          {lines.map((toDrawLine) => (\n            <path\n              key={toDrawLine[0][grouping]}\n              d={drawLines(toDrawLine)!}\n              stroke={stroke || colorScale(colorValue(toDrawLine[0]))}\n              strokeWidth={strokeWidth}\n              opacity={opacity}\n              fill=\"none\"\n            />\n          ))}\n          {cords &&\n            cords.map(({ x: cordX, y: cordY }) => (\n              <circle\n                key={`cord-${cordX}-${cordY}`}\n                cx={xScale(cordX)}\n                cy={yScale(cordY)}\n                fill=\"red\"\n                opacity=\"0.4\"\n                r={8}\n              />\n            ))}\n        </AnimatedGroup>\n      </g>\n      {focusable && (\n        <AnimatedGroup\n          ref={brushRef}\n          transform={`translate(${marginsForAxes.left}, ${\n            height + margin.bottom + margin.top - brushedSectionHeight\n          })`}\n        >\n          <AxisBottom\n            xScale={focusXScale}\n            height={brushedSectionHeight}\n            tickOffset={10}\n          />\n\n          {focusLines?.map((toDrawLine) => (\n            <path\n              key={toDrawLine[0][grouping]}\n              d={drawFocus(toDrawLine)!}\n              stroke={stroke || colorScale(colorValue(toDrawLine[0]))}\n              strokeWidth={strokeWidth}\n              opacity={opacity}\n              fill=\"none\"\n            />\n          ))}\n        </AnimatedGroup>\n      )}\n    </svg>\n  );\n};\n","import { ScaleLinear } from 'd3';\nimport { currencyFormatter } from '../../util/currency';\n\nexport interface AxisBottom {\n  xScale: ScaleLinear<number, number, never>;\n  yScale: ScaleLinear<number, number, never>;\n  width: number;\n  tickOffset?: number;\n  isDollarValue?: boolean;\n}\n\nexport const AxisBottom: React.FC<AxisBottom> = ({\n  xScale,\n  yScale,\n  width,\n  tickOffset = 3,\n  isDollarValue = false,\n}) => {\n  return (\n    <>\n      {xScale.ticks().map((tick) => (\n        <g\n          style={{ stroke: '#C0C0BB' }}\n          key={tick}\n          transform={`translate(0, ${yScale.range()[0] / 2})`}\n        >\n          <line x1={0} x2={width} />\n          <line\n            y1={-tickOffset}\n            y2={tickOffset}\n            x1={xScale(tick)}\n            x2={xScale(tick)}\n          />\n          <text dy=\".71em\" textAnchor=\"middle\" y={tickOffset} x={xScale(tick)}>\n            {isDollarValue ? currencyFormatter.format(tick) : tick}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n","import { Col, Row, Select, Space, Typography } from 'antd';\n\nimport { CSVRow } from '../../services/models/shared';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { KeysMatching } from '../../types/shared';\nimport { PropsWithChildren } from 'react';\n\nconst { Text } = Typography;\nconst { Option } = Select;\n\nexport interface LineChartAxesProps<T extends CSVRow> {\n  id: string;\n  selectedX: KeysMatching<T, number | undefined>;\n  selectedY: KeysMatching<T, number | undefined>;\n  selectedGrouping: KeysMatching<T, string | undefined>;\n  selectedFilter: string;\n  onSelectX: (xAxis: KeysMatching<T, number | undefined>) => void;\n  onSelectY: (yAxis: KeysMatching<T, number | undefined>) => void;\n  onSelectGrouping: (grouping: KeysMatching<T, string | undefined>) => void;\n  onSelectFilter: (filter: string) => void;\n  data: DSVParsedArray<T>;\n  labels: Record<string, string>;\n}\n\nexport const LineChartAxes = <T extends CSVRow>({\n  id,\n  selectedX,\n  selectedY,\n  selectedGrouping,\n  selectedFilter,\n  onSelectX,\n  onSelectY,\n  onSelectGrouping,\n  onSelectFilter,\n  data,\n  labels,\n}: PropsWithChildren<LineChartAxesProps<T>>) => {\n  const groupValue = (row: T) => row[selectedGrouping] as string;\n  const uniqueGroupValues = Array.from(new Set(data.map(groupValue)));\n  uniqueGroupValues.push('All');\n\n  // this is probably not the best way of doing this\n  const numericOptions = Object.entries(data[0])\n    .filter((col) => typeof col[1] === 'number')\n    .map((col) => col[0]);\n\n  const stringOptions = Object.entries(data[0])\n    .filter((col) => typeof col[1] === 'string')\n    .map((col) => col[0]);\n\n  return (\n    <Row style={{ width: '100%' }} gutter={[12, 12]}>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text id={`${id}-x-axis-label`} strong style={{ fontSize: 12 }}>\n            X Axis:\n          </Text>\n          <Select\n            aria-labelledby={`${id}-x-axis-label`}\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedX as string}\n            onChange={onSelectX as (value: string) => void}\n          >\n            {numericOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Y Axis:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedY as string}\n            onChange={onSelectY as (value: string) => void}\n          >\n            {numericOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Grouping:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedGrouping as string}\n            onChange={onSelectGrouping as (value: string) => void}\n          >\n            {stringOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Filter:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedFilter}\n            onChange={onSelectFilter}\n          >\n            {uniqueGroupValues.map((key) => (\n              <Option value={key} key={key}>\n                {key}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n    </Row>\n  );\n};\n","import { ScaleLinear } from 'd3';\nimport { currencyFormatter } from '../../util/currency';\n\nexport interface AxisLeftProps {\n  xScale: ScaleLinear<number, number, never>;\n  yScale: ScaleLinear<number, number, never>;\n  height: number;\n  tickOffset?: number;\n  isDollarValue?: boolean;\n}\n\nexport const AxisLeft: React.FC<AxisLeftProps> = ({\n  xScale,\n  yScale,\n  height,\n  tickOffset = 3,\n  isDollarValue = false,\n}) => {\n  const reversed = yScale.ticks().slice().reverse();\n\n  return (\n    <>\n      {reversed.map((tick) => (\n        <g\n          key={tick}\n          style={{ stroke: '#C0C0BB' }}\n          transform={`translate(${xScale.range()[1] / 2}, 0)`}\n        >\n          <line y1={0} y2={height} />\n          <line\n            x1={-tickOffset}\n            x2={tickOffset}\n            y1={yScale(tick)}\n            y2={yScale(tick)}\n          />\n          <text textAnchor=\"end\" x={-tickOffset} y={yScale(tick)} dy=\".32em\">\n            {isDollarValue ? currencyFormatter.format(tick) : tick}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n","/* eslint-disable react/no-array-index-key */\nimport {\n  DSVParsedArray,\n  extent,\n  interpolateTurbo,\n  scaleLinear,\n  scaleOrdinal,\n} from 'd3';\n\nimport { AxisBottom } from './AxisBottom';\nimport { AxisLeft } from './AxisLeft';\nimport { CSVRow } from '../../services/models/shared';\nimport { KeysMatching } from '../../types/shared';\nimport { AnimatedGroup } from '../AnimatedGroup';\nimport { PropsWithChildren, useCallback, useMemo, ReactElement } from 'react';\nimport ReactTooltip from 'react-tooltip';\n\nexport interface ScatterPlotProps<T extends CSVRow> {\n  width: number;\n  height: number;\n  margin: { top: number; right: number; bottom: number; left: number };\n  x: KeysMatching<T, number | undefined>;\n  y: KeysMatching<T, number | undefined>;\n  xLabel: string;\n  yLabel: string;\n  color?: KeysMatching<T, string | undefined>;\n  radius: number;\n  data: DSVParsedArray<T>;\n  opacity?: string;\n  isXAxisDollarValue?: boolean;\n  isYAxisDollarValue?: boolean;\n  circleText?: (val: string) => string;\n  renderToolTip?: (x: number, y: number, color: string) => ReactElement;\n}\n\nexport const ScatterPlot = <T extends CSVRow>({\n  width,\n  height = 400,\n  margin,\n  x,\n  y,\n  xLabel,\n  yLabel,\n  color,\n  radius,\n  data,\n  opacity = '.3',\n  isXAxisDollarValue,\n  isYAxisDollarValue,\n  circleText,\n  renderToolTip,\n}: PropsWithChildren<ScatterPlotProps<T>>) => {\n  const xAxisLabelOffset = 50;\n\n  const xValue = useCallback((row: T) => row[x] as number, [x]);\n  const yValue = useCallback((row: T) => row[y] as number, [y]);\n  const colorValue = useCallback(\n    (row: T) => {\n      return color ? (row[color] as string) : undefined;\n    },\n    [color]\n  );\n\n  const xRange = useMemo(() => {\n    return extent(data, xValue) as [number, number];\n  }, [xValue, data]);\n\n  const yRange = useMemo(() => {\n    return extent(data, yValue) as [number, number];\n  }, [yValue, data]);\n\n  const paddedHeight = useMemo(() => {\n    return height - margin.top - margin.bottom;\n  }, [height, margin]);\n\n  const paddedWidth = useMemo(() => {\n    return width - margin.left - margin.right;\n  }, [width, margin]);\n\n  const xScale = useMemo(() => {\n    return scaleLinear().domain(xRange).range([0, paddedWidth]).nice();\n  }, [xRange, paddedWidth]);\n\n  const yScale = useMemo(() => {\n    return scaleLinear().domain(yRange).range([paddedHeight, 0]);\n  }, [yRange, paddedHeight]);\n\n  const { colorScale } = useMemo(() => {\n    if (color) {\n      const uniqueOrdinalValues = Array.from(\n        new Set(data.map(colorValue))\n      ) as string[];\n      const numUniqueOrdinalValues = uniqueOrdinalValues.length;\n      const range = uniqueOrdinalValues.map((_, index) => {\n        return interpolateTurbo(index / numUniqueOrdinalValues);\n      });\n\n      const scale = scaleOrdinal<string>()\n        .domain(data.map(colorValue as (row: T) => string))\n        .range(range);\n\n      return { colorRange: range, colorScale: scale };\n    }\n\n    return { colorRange: undefined, colorScale: undefined };\n  }, [colorValue, data, color]);\n\n  const marginsForAxes = useMemo(() => {\n    return {\n      ...margin,\n      left: yRange[1].toString().length * 8.75 + 20,\n    };\n  }, [yRange, margin]);\n\n  const yAxisLabelOffset = useMemo(() => {\n    return yRange[1].toString().length * 8.75 + 10;\n  }, [yRange]);\n\n  const yAxisLabel = useMemo(() => {\n    return (\n      <text\n        className=\"axis-label\"\n        textAnchor=\"middle\"\n        transform={`translate(${-yAxisLabelOffset},${\n          paddedHeight / 2\n        }) rotate(-90)`}\n      >\n        {yLabel}\n      </text>\n    );\n  }, [yAxisLabelOffset, paddedHeight, yLabel]);\n\n  const findFieldByValue = (value: string): { x: number; y: number } => {\n    const tmp = data.find((el) => (el[color!] as string) === value);\n\n    return tmp\n      ? { x: tmp[x!] as number, y: tmp[y!] as number }\n      : { x: 0, y: 0 };\n  };\n\n  return (\n    <>\n      <svg width={width} height={height}>\n        <g\n          transform={`translate(${marginsForAxes.left},${marginsForAxes.top})`}\n        >\n          <AxisBottom\n            xScale={xScale}\n            yScale={yScale}\n            width={paddedWidth}\n            tickOffset={10}\n            isDollarValue={isXAxisDollarValue}\n          />\n\n          {yAxisLabel}\n\n          <AxisLeft\n            xScale={xScale}\n            yScale={yScale}\n            height={paddedHeight}\n            tickOffset={5}\n            isDollarValue={isYAxisDollarValue}\n          />\n\n          <text\n            className=\"axis-label\"\n            x={paddedWidth / 2}\n            y={paddedHeight + xAxisLabelOffset}\n            textAnchor=\"middle\"\n          >\n            {xLabel}\n          </text>\n\n          <AnimatedGroup>\n            {data.map((row, index) => {\n              return (\n                <g data-tip={colorValue(row)} data-for=\"tooltip\" key={index}>\n                  <circle\n                    cx={xScale(xValue(row))}\n                    cy={yScale(yValue(row))}\n                    r={radius}\n                    opacity={opacity}\n                    fill={colorScale ? colorScale(colorValue(row)!) : 'green'}\n                  />\n                  {circleText && (\n                    <text\n                      x={xScale(xValue(row))}\n                      y={yScale(yValue(row))}\n                      textAnchor=\"middle\"\n                      strokeWidth=\"1px\"\n                      opacity={opacity}\n                      dy=\".3em\"\n                      style={{ cursor: 'pointer' }}\n                    >\n                      {circleText(colorValue(row)!)}\n                    </text>\n                  )}\n                </g>\n              );\n            })}\n          </AnimatedGroup>\n        </g>\n      </svg>\n      {renderToolTip && (\n        <ReactTooltip\n          id=\"tooltip\"\n          place=\"top\"\n          effect=\"solid\"\n          getContent={(val) => {\n            const xAndY = findFieldByValue(val);\n            return renderToolTip(xAndY.x, xAndY.y, val);\n          }}\n        />\n      )}\n    </>\n  );\n};\n","const StateAbbreviation = {\n  alabama: 'AL',\n  alaska: 'AK',\n  arizona: 'AZ',\n  arkansas: 'AR',\n  california: 'CA',\n  colorado: 'CO',\n  connecticut: 'CT',\n  delaware: 'DE',\n  'district of colombia': 'DC',\n  florida: 'FL',\n  georgia: 'GA',\n  hawaii: 'HI',\n  idaho: 'ID',\n  illinois: 'IL',\n  indiana: 'IN',\n  iowa: 'IA',\n  kansas: 'KS',\n  kentucky: ' KY',\n  louisiana: 'LA',\n  maine: 'ME',\n  maryland: 'MD',\n  massachusetts: 'MA',\n  michigan: 'MI',\n  minnesota: 'MN',\n  mississippi: 'MS',\n  missouri: 'MO',\n  montana: 'MT',\n  nebraska: 'NE',\n  nevada: 'NV',\n  'new hampshire': 'NH',\n  'new jersey': 'NJ',\n  'new mexico': 'NM',\n  'new york': 'NY',\n  'north carolina': 'NC',\n  'north dakota': 'ND',\n  ohio: 'OH',\n  oklahoma: 'OK',\n  oregon: 'OR',\n  pennsylvania: ' PA',\n  'rhode island': 'RI',\n  'south carolina': 'SC',\n  'south dakota': 'SD',\n  tennessee: 'TN',\n  texas: 'TX',\n  utah: 'UT',\n  vermont: 'VT',\n  virginia: 'VA',\n  washington: 'WA',\n  'west virginia': 'WV',\n  wisconsin: 'WI',\n  wyoming: 'WY',\n  'american samoa': 'AS',\n  guam: 'GU',\n  'northern mariana islands': 'MP',\n  'puerto rico': 'PR',\n  'u.s. virgin islands': 'VI',\n  'u.s. minor outlying islands': 'UM',\n  'marshall islands': 'MH',\n  micronesia: 'FM',\n  palau: 'PW',\n} as const;\n\ntype State = keyof typeof StateAbbreviation;\n\nexport const convertStateToAbbreviation = (state: string) => {\n  const lowercase = state.toLowerCase() as State;\n  return StateAbbreviation[lowercase];\n};\n","import { Col, Row, Select, Space, Typography } from 'antd';\n\nimport { CSVRow } from '../../services/models/shared';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { KeysMatching } from '../../types/shared';\nimport { PropsWithChildren } from 'react';\n\nconst { Text } = Typography;\nconst { Option } = Select;\n\nexport interface ScatterPlotAxesProps<T extends CSVRow> {\n  id: string;\n  selectedX: KeysMatching<T, number | undefined>;\n  selectedY: KeysMatching<T, number | undefined>;\n  selectedColor: KeysMatching<T, string | undefined>;\n  onSelectX: (xAxis: KeysMatching<T, number | undefined>) => void;\n  onSelectY: (yAxis: KeysMatching<T, number | undefined>) => void;\n  onSelectColor: (color: KeysMatching<T, string | undefined>) => void;\n  data: DSVParsedArray<T>;\n  labels: Record<string, string>;\n}\n\nexport const ScatterPlotAxes = <T extends CSVRow>({\n  id,\n  selectedX,\n  selectedY,\n  selectedColor,\n  onSelectX,\n  onSelectY,\n  onSelectColor,\n  data,\n  labels,\n}: PropsWithChildren<ScatterPlotAxesProps<T>>) => {\n  // this is probably not the best way of doing this\n  const numericOptions = Object.entries(data[0])\n    .filter((col) => typeof col[1] === 'number')\n    .map((col) => col[0]);\n\n  const stringOptions = Object.entries(data[0])\n    .filter((col) => typeof col[1] === 'string')\n    .map((col) => col[0]);\n\n  return (\n    <Row style={{ width: '100%' }} gutter={[12, 12]}>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text id={`${id}-x-axis-label`} strong style={{ fontSize: 12 }}>\n            X Axis:\n          </Text>\n          <Select\n            aria-labelledby={`${id}-x-axis-label`}\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedX as string}\n            onChange={onSelectX as (value: string) => void}\n          >\n            {numericOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Y Axis:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedY as string}\n            onChange={onSelectY as (value: string) => void}\n          >\n            {numericOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Color:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedColor as string}\n            onChange={onSelectColor as (value: string) => void}\n          >\n            {stringOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n    </Row>\n  );\n};\n","import {\n  GeospatialChart,\n  YearSelector,\n} from '../../components/GeospatialChart';\nimport { Col, Divider, Row, Space, Typography } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport { Constants } from './constants';\nimport { MinimumWage } from '../../services/models/minimumWage';\nimport { PageLayout } from '../../layout/PageLayout';\nimport { useFallback } from '../../hooks/useFallback';\nimport { useIncrementYear } from '../../hooks/useIncrementYear';\nimport { useMinimumWageQuery } from '../../services/hooks/useQuery';\nimport { useMemo, useState } from 'react';\nimport { currencyFormatter } from '../../util/currency';\nimport { LineChart } from '../../components/LineChart';\nimport { DSVParsedArray } from 'd3';\nimport { ScatterPlot } from '../../components/ScatterPlot';\nimport { convertStateToAbbreviation } from '../../util/convertStateToAbbreviation';\n\nexport interface FinalVisPageProps {}\n\nconst { Text } = Typography;\n\nexport const FinalVisPage: React.FC<FinalVisPageProps> = () => {\n  const { data, isError, isLoading } = useMinimumWageQuery();\n\n  const minYear = data?.[0].year || 1968;\n  const maxYear = data?.[data.length - 1]?.year || 2020;\n\n  const minScatterPlotYear = 2001;\n  const maxScatterPlotYear = 2020;\n\n  const [shouldDisableAutoIncrement, setShouldDisableAutoIncrementYear] =\n    useState(true);\n  const [\n    shouldDisableScatterPlotAutoIncrement,\n    setShouldDisableScatterPlotAutoIncrement,\n  ] = useState(true);\n  const [selectedYear, setSelectedYear] = useState(minYear);\n  const [selectedScatterPlotYear, setSelectedScatterPlotYear] =\n    useState(minScatterPlotYear);\n  const [selectedState, setSelectedState] = useState<string>('all');\n\n  const filteredData = useMemo(() => {\n    return data?.filter(\n      (row) => row.studio && row.year === selectedScatterPlotYear\n    ) as DSVParsedArray<MinimumWage> | undefined;\n  }, [data, selectedScatterPlotYear]);\n\n  const { fallback } = useFallback<MinimumWage>(isLoading, isError, data);\n\n  useIncrementYear(\n    maxYear,\n    minYear,\n    !shouldDisableAutoIncrement,\n    selectedYear || 1968,\n    setSelectedYear\n  );\n\n  useIncrementYear(\n    maxScatterPlotYear,\n    minScatterPlotYear,\n    !shouldDisableScatterPlotAutoIncrement,\n    selectedScatterPlotYear,\n    setSelectedScatterPlotYear\n  );\n\n  const xAxisLabel = 'Two Bedroom Apartment Cost ($)';\n  const yAxisLabel = 'Minimum Wage ($/hour)';\n\n  if (fallback || !data || !filteredData) {\n    return fallback;\n  }\n\n  const description = (\n    <Space direction=\"vertical\">\n      <Divider />\n      <Text strong style={{ fontSize: 24 }}>\n        Description\n      </Text>\n      <Text>\n        A geospatial chart depicting effective minimum wage data for all U.S\n        states and territories since 1968. It visualizes data supplied by the\n        U.S Department of Labor. All data can be found in the{' '}\n        <Link to={{ pathname: Constants.minWageUrl }} target=\"_blank\">\n          Minimum Wage Dataset\n        </Link>\n        .\n      </Text>\n      <ul>\n        <li>Dollar amounts shown are in 2020 dollars.</li>\n        <li>Darker state colors represent higher minimum wages.</li>\n      </ul>\n      <Divider />\n      <Text strong style={{ fontSize: 24 }}>\n        What&apos;s New\n      </Text>\n      <ul>\n        <li>Toggle that automates incrementing year</li>\n        <li>Legend showing what colors represent on the geospatial chart</li>\n        <li>\n          When hovering on a state, show the effective minimum wage for that\n          state in a box below the chart\n        </li>\n        <li>Zoom and pan functionality is working.</li>\n      </ul>\n      <Divider />\n      <Text strong style={{ fontSize: 24 }}>\n        Still To Do\n      </Text>\n      <ul>\n        <li>\n          For smaller screen sizes, figure out why the chart does not center\n          properly on load\n        </li>\n        <li>\n          Implement an actual tooltip that appears when hovering on a state\n        </li>\n      </ul>\n    </Space>\n  );\n\n  return (\n    <PageLayout\n      pageTitle=\"Final Visualization Project\"\n      description={description}\n      showDescriptionTitle={false}\n      generateChart={({ width }) => (\n        <>\n          <Row justify=\"space-between\" style={{ width }}>\n            <Col style={{ width: '30%', display: 'block', margin: 'auto' }}>\n              <YearSelector\n                defaultYear={selectedYear}\n                minYear={minYear}\n                maxYear={maxYear}\n                incrementYearDisabled={shouldDisableAutoIncrement}\n                toggleIncrementYear={setShouldDisableAutoIncrementYear}\n                onChange={setSelectedYear}\n              />\n            </Col>\n            <Col style={{ textAlign: 'center', width: '50%' }}>\n              <Text strong style={{ fontSize: 24 }}>\n                {selectedState !== 'all' ? selectedState : 'All States'}\n              </Text>\n            </Col>\n          </Row>\n          <Row style={{ width }}>\n            <Col flex={1}>\n              <GeospatialChart<MinimumWage>\n                width={width / 2}\n                height={400}\n                rows={data}\n                timeField=\"year\"\n                stateField=\"state\"\n                colorRepresentation=\"effectiveMinWageTodayDollars\"\n                chosenTimeField={selectedYear}\n                onClick={(_, state) => setSelectedState(state)}\n                showLegend\n                renderToolTip={(state, minWage) => (\n                  <Space direction=\"vertical\">\n                    <Text style={{ color: 'white' }}>State: {state}</Text>\n                    <Text style={{ color: 'white' }}>\n                      Effective Minimum Wage:{' '}\n                      {currencyFormatter.format(minWage)}\n                    </Text>\n                  </Space>\n                )}\n              />\n            </Col>\n            <Col flex={1}>\n              <LineChart<MinimumWage>\n                width={width / 2}\n                height={400}\n                margin={{ top: 30, right: 30, bottom: 50, left: 0 }}\n                data={data}\n                xLabel=\"Year\"\n                yLabel=\"Effective Minimum Wage ($)\"\n                x=\"year\"\n                y=\"effectiveMinWageTodayDollars\"\n                grouping=\"state\"\n                cords={\n                  selectedState !== 'all'\n                    ? [\n                        {\n                          x: selectedYear,\n                          y:\n                            data.find(\n                              (wage) =>\n                                wage.year === selectedYear &&\n                                wage.state?.toLowerCase() ===\n                                  selectedState.toLowerCase()\n                            )?.effectiveMinWageTodayDollars ?? 0,\n                        },\n                      ]\n                    : undefined\n                }\n                filter={\n                  selectedState !== 'all'\n                    ? (row) => row.state === selectedState\n                    : undefined\n                }\n                opacity=\".4\"\n                strokeWidth={3}\n                stroke={selectedState !== 'all' ? 'blue' : undefined}\n              />\n            </Col>\n          </Row>\n          <Divider />\n          <Row style={{ width }} justify=\"center\">\n            <Col style={{ width: '30%' }}>\n              <YearSelector\n                defaultYear={selectedScatterPlotYear}\n                minYear={minScatterPlotYear}\n                maxYear={maxScatterPlotYear}\n                incrementYearDisabled={shouldDisableScatterPlotAutoIncrement}\n                toggleIncrementYear={setShouldDisableScatterPlotAutoIncrement}\n                onChange={setSelectedScatterPlotYear}\n              />\n            </Col>\n          </Row>\n          <Row style={{ width }}>\n            <Col flex=\"1\">\n              <ScatterPlot<MinimumWage>\n                width={width}\n                height={400}\n                margin={{ top: 30, right: 30, bottom: 60, left: 0 }}\n                data={filteredData}\n                xLabel={xAxisLabel}\n                yLabel={yAxisLabel}\n                x=\"twoBedroom\"\n                y=\"stateMinWageTodayDollars\"\n                color=\"state\"\n                radius={12}\n                isXAxisDollarValue\n                isYAxisDollarValue\n                opacity=\"0.4\"\n                circleText={(state) => convertStateToAbbreviation(state)}\n                renderToolTip={(x, y, state) => (\n                  <Space direction=\"vertical\">\n                    <Text style={{ color: 'white' }}>State: {state}</Text>\n                    <Text style={{ color: 'white' }}>\n                      Rent Cost: {currencyFormatter.format(x)}\n                    </Text>\n                    <Text style={{ color: 'white' }}>\n                      Effective Minimum Wage: {currencyFormatter.format(y)}\n                    </Text>\n                  </Space>\n                )}\n              />\n            </Col>\n          </Row>\n        </>\n      )}\n    />\n  );\n};\n"],"sourceRoot":""}